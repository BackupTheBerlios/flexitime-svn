/*
 * Created on 4 janv. 2005
 * by binou
 * Copyright: GPL - UMLV(FR) - 2004/2005
 */

package fr.umlv.ir3.flexitime.richClient.gui.panel.exploitation;

import java.awt.Component;
import java.awt.GridBagConstraints;
import java.awt.GridBagLayout;
import java.awt.Point;
import java.awt.Rectangle;
import java.awt.dnd.DnDConstants;
import java.awt.dnd.DragSource;
import java.awt.dnd.DropTarget;
import java.awt.event.MouseAdapter;
import java.awt.event.MouseEvent;
import java.awt.event.MouseListener;
import java.awt.event.MouseMotionAdapter;
import java.awt.event.MouseMotionListener;
import java.awt.image.BufferedImage;
import java.util.ArrayList;
import java.util.List;

import javax.swing.JComponent;
import javax.swing.JMenu;
import javax.swing.JMenuItem;
import javax.swing.JPanel;
import javax.swing.JPopupMenu;
import javax.swing.SwingUtilities;

import fr.umlv.ir3.flexitime.common.gui.event.PlanningDataEvent;
import fr.umlv.ir3.flexitime.common.gui.event.PlanningDataListener;
import fr.umlv.ir3.flexitime.common.gui.models.RessourcePlanningHebdoModelAdapter;
import fr.umlv.ir3.flexitime.common.gui.models.RessourcePlanningModel;
import fr.umlv.ir3.flexitime.richClient.gui.panel.exploitation.controllers.ComponentDragSourceListener;
import fr.umlv.ir3.flexitime.richClient.gui.panel.exploitation.controllers.HebdoComponentDragGestureListener;
import fr.umlv.ir3.flexitime.richClient.gui.panel.exploitation.controllers.HebdoComponentDropTargetListener;
import fr.umlv.ir3.flexitime.richClient.gui.renderers.PlanningHebdoCellHeaderRenderer;
import fr.umlv.ir3.flexitime.richClient.gui.renderers.PlanningHebdoCellRenderer;
import fr.umlv.ir3.flexitime.richClient.gui.renderers.PlanningTrimCellHeaderRenderer;
import fr.umlv.ir3.flexitime.richClient.gui.renderers.PlanningTrimCellRenderer;

/**
 * A component that allows the user to manage a planning A separate model,
 * <code>EDTModel</code>, represents the contents of the planning.
 * 
 * @version 0.1
 * @see RessourcePlanningModel
 * @see PlanningTrimCellRenderer
 * @see PlanningTrimCellHeaderRenderer
 * @author FlexiTeam - binou
 */
public class JRessourcePlanningHebdo extends JPanel implements PlanningDataListener
{

    /**
     * Comment for <code>WEEK_WIDTH</code>
     */
    public static final int DATE_WIDTH = 130;
    /**
     * Comment for <code>DAY_COLUMN_WIDTH</code>
     */
    public static final int TIMEBLOC_WIDTH = 90;
    /**
     * Comment for <code>DAY_HEIGTH</code>
     */
    public static final int DATE_HEIGTH = 30;
    /**
     * Comment for <code>GAP_HEIGTH</code>
     */
    public static int GAP_HEIGTH;

    // TODO changer les tailles pour les calculer suivant les parametres du
    // modele

    private GridBagLayout                  gbl;

    private DragSource                     dragSource;
    private DropTarget                     dropTarget;
    
    public static BufferedImage           buffImage        = null;                // buff image
    public static Point                   cursorPoint      = new Point();

    private List<JBusy>                    selectedItems;

    private RessourcePlanningHebdoModelAdapter model;
    private PlanningHebdoCellRenderer cellRenderer;
    private PlanningHebdoCellHeaderRenderer cellHeaderRenderer;
    

    protected DayPanel[]  dayPanelTabs;
    protected JPanel        blocPanelTabs;
    
    protected JPopupMenu  popupSeance;
    protected JPopupMenu  popupVide;
    protected JMenuItem   menuItem;
    protected JMenu       menu;
    protected JMenu       menu2;
    protected JMenuItem   menuItem2;


    /**
     * Creates a new FlexiPlanning, using the specified model
     * 
     * @param model the model to reprensents the data
     */
    public JRessourcePlanningHebdo(RessourcePlanningHebdoModelAdapter model)
    {
        super();

        // this.gbl = new GridBagLayout();
        // setLayout(gbl);

        dragSource = new DragSource();
        ComponentDragSourceListener tdsl = new ComponentDragSourceListener();
        dragSource.createDefaultDragGestureRecognizer(this,
                DnDConstants.ACTION_COPY_OR_MOVE,
                new HebdoComponentDragGestureListener(this, dragSource, tdsl));
        HebdoComponentDropTargetListener tdtl = new HebdoComponentDropTargetListener(this);
        dropTarget = new DropTarget(this, DnDConstants.ACTION_MOVE, tdtl);
        dropTarget.getClass();

        this.model = model;
        this.cellRenderer = new PlanningHebdoCellRenderer();
        this.cellHeaderRenderer = new PlanningHebdoCellHeaderRenderer();

        this.model.addPlanningDataListener(this);

        this.selectedItems = new ArrayList<JBusy>();

        this.init();
        this.setAutoscrolls(true);
        MouseMotionListener doScrollRectToVisible = new MouseMotionAdapter() {
            public void mouseDragged(MouseEvent e) {
                //System.out.println("mouseDragged at " + System.currentTimeMillis());
               Rectangle r = new Rectangle(e.getX(), e.getY(), 1, 1);
               ((JPanel)e.getSource()).scrollRectToVisible(r);
           }
            
        };
        this.addMouseMotionListener(doScrollRectToVisible);
        
        createPopup();
        
    }
    

    

    //*************************************************
    //   getters
    //*************************************************

    /**
     * Returns the model of the FlexiEDT
     * 
     * @return the model used by the component
     * @see RessourcePlanningModel
     * @author FlexiTeam - binou
     */
    public RessourcePlanningHebdoModelAdapter getModel()
    {
        return model;
    }
    


    
    
    
 


    
    
    //*************************************************
    //   Création
    //*************************************************

    /**
     * Initialyse the time table Is only used at the creation
     * 
     * @author FlexiTeam - binou
     */
    private void init()
    {
        this.gbl = new GridBagLayout();
        setLayout(this.gbl);
        
        dayPanelTabs = new DayPanel[model.getNbDays()];
        for (int j = 0 ; j < model.getNbDays() ; j++)
            dayPanelTabs[j] = new DayPanel(new GridBagLayout(), model.getDayGapSize());

        this.blocPanelTabs = new JPanel(new GridBagLayout());
        
        GAP_HEIGTH = model.getGapUnit() * model.getGapMultiplicateur();
        
        revalidate();
        removeAll();
        this.createDayLign();
        this.createTimeBlocColumn();
        this.fillLesson();
        repaint();
    }
    
    
    /** 
     * Generate the week Header of the time table containing the number of each week
     * 
     * @author   FlexiTeam - binou
     */
    private void createDayLign()
    {
        for (int i = 0 ; i < model.getNbDays() ; i++)
            addDayHeader(i+1,0,i);  //+1 =+timeBlocColumn
    } 
    
    /** 
     * Generate the first Column of the planning
     * containing : <br>
     * - the name of each day
     * - all gap's header
     * - each date of each days on each weeks
     * Is only used at the creation
     * 
     * @author   FlexiTeam - binou
     */
    private void createTimeBlocColumn()
    {
        int length = 0;
        int prec = 0;
        addBlocPanel(1);
        for (int j = 0 ; j < model.getNbBloc() ; j++)
        {
            length = model.getBlocSize(j);
            addGapHeader(0, prec+1, j, length); // +1 = +dayLign
            prec += length;
        }
    }
    
    private void addBlocPanel(int y)
    {
        GridBagConstraints c = new GridBagConstraints();
        c.gridx = 0;
        c.gridy = y;
        c.gridheight = model.getDayGapSize();
        c.anchor = GridBagConstraints.NORTH;

        //System.out.println("from " + y + "sur " + model.getDayGapSize());
        //System.out.println("ajout du panel en " + x + "," + y + " sur " + model.getDayGapSize() + " cases");
        add(this.blocPanelTabs, c);
    }
    



    /**
     * Generate the data in the planning : - each Lessons - each empty space (no
     * lessons) Is only used at the creation
     * 
     * @author FlexiTeam - binou
     */
    private void fillLesson()
    {     
        for (int i = 0 ; i < model.getNbDays() ; i++)
        {
            addPanel(i+1, 1, i);
            for (int j = 0 ; j < model.getDayGapSize() ; j++)
                addGap(i+1, j+1, i, j);
        }
    }

    private void addPanel(int x, int y, int day)
    {
        GridBagConstraints c = new GridBagConstraints();
        c.gridx = x;
        c.gridy = y;
        c.gridheight = model.getDayGapSize();
        //System.out.println("ajout du panel en " + x + "," + y + " sur " + model.getDayGapSize() + " cases");
        add(dayPanelTabs[day], c);
        
    }
    
    
    private void createPopup()
    {
        popupSeance = new JPopupMenu();
        menuItem = new JMenuItem("Couper");
        //menuItem.addActionListener(this);
        popupSeance.add(menuItem);
        menuItem = new JMenuItem("Copier");
        //menuItem.addActionListener(this);
        popupSeance.add(menuItem);
        menuItem = new JMenuItem("Coller");
        menuItem.setEnabled(false);
        //menuItem.addActionListener(this);
        popupSeance.add(menuItem);
        popupSeance.addSeparator();
        menuItem = new JMenuItem("Editer la séance");
        //menuItem.addActionListener(this);
        popupSeance.add(menuItem);
        menuItem = new JMenuItem("Envoyer un rappel au professeur");
        //menuItem.addActionListener(this);
        popupSeance.add(menuItem);
        menu = new JMenu("Dupliquer");
        //menuItem.addActionListener(this);
        {
            menu2 = new JMenu("sur n semaines");
            {
                menuItem = new JMenuItem("1");
                //menuItem.addActionListener(this);
                menu2.add(menuItem);
                menuItem = new JMenuItem("2");
                //menuItem.addActionListener(this);
                menu2.add(menuItem);
                menuItem = new JMenuItem("3");
                //menuItem.addActionListener(this);
                menu2.add(menuItem);
            }
            menu.add(menu2);
            menuItem = new JMenuItem("sur 1 mois");
            //menuItem.addActionListener(this);
            menu.add(menuItem);
        }
        
        popupSeance.add(menu);
        menuItem = new JMenuItem("Supprimer");
        //menuItem.addActionListener(this);
        popupSeance.add(menuItem);
        
        MouseListener popupListener = new PopupListener();
        this.addMouseListener(popupListener);
        
        
        popupVide = new JPopupMenu();
        menuItem = new JMenuItem("Couper");
        menuItem.setEnabled(false);
        //menuItem.addActionListener(this);
        popupVide.add(menuItem);
        menuItem = new JMenuItem("Copier");
        menuItem.setEnabled(false);
        //menuItem.addActionListener(this);
        popupVide.add(menuItem);
        menuItem = new JMenuItem("Coller");
        //menuItem.addActionListener(this);
        popupVide.add(menuItem);
        popupVide.addSeparator();
        menuItem = new JMenuItem("Ajouter une indisponibilité");
        //menuItem.addActionListener(this);
        popupVide.add(menuItem);
        
    }
    
    
    
    //*************************************************
    //   Ajout des données
    //*************************************************



    private void addGapHeader(int day, int gapNumber, int blocNumber, int length)
    {
        JComponent comp = cellHeaderRenderer.getCellHeaderRendererComponent(this, model.getGapHeaderAt(blocNumber),
                PlanningTrimCellHeaderRenderer.GAP_HEADER,length);

        GridBagConstraints c = new GridBagConstraints();
        /*c.gridx = x;
        c.gridy = y;
        c.gridheight = length;
        c.fill = GridBagConstraints.VERTICAL;
        add(comp, c);*/
        
        c.gridx = 0;
        c.gridy = gapNumber;
        //System.out.println("#" + gapNumber + "#" + length);
        c.gridheight = length;
        c.fill = GridBagConstraints.HORIZONTAL;
        this.blocPanelTabs.add(comp,c);
    }

    /**
     * Add to the layout a day header at the specified coordinate Is only used
     * at the creation
     * 
     * @param x the x coordinate
     * @param y the y coordinate
     * @param dayNumber - the day number of the header to add
     * @author FlexiTeam - binou
     */
    private void addDayHeader(int x, int y, int dayNumber)
    {
        JComponent comp = cellHeaderRenderer.getCellHeaderRendererComponent(
                this, model.getDayHeaderAt(dayNumber),
                PlanningTrimCellHeaderRenderer.DAY_HEADER, 1);

        GridBagConstraints c = new GridBagConstraints();
        c.gridx = x;
        c.gridy = y;
        add(comp, c);
    }

    /**
     * Quel service est rendu par cette méthode
     * <code>exemple d'appel de la methode</code>
     * 
     * @param weekNumber
     * @param dayNumber
     * @param gapNumber
     * @author FlexiTeam - binou
     */
    private void addGap(int x, int y, int dayNumber, int gapNumber)
    {

        JComponent comp = cellRenderer.getCellRendererComponent(this, model
                .getElementAt( dayNumber, gapNumber),
                dayNumber, gapNumber);
        
        if (comp != null)
        {
            GridBagConstraints c = new GridBagConstraints();
            c.gridx = 0;
            c.gridy = gapNumber;
            c.fill = GridBagConstraints.HORIZONTAL;
            if (comp instanceof JBusy)
            {
                JBusy jbusy = (JBusy)comp;
                if(jbusy.getBusy() != null)
                {
                    c.gridheight = ( (JBusy) comp ).getNbGaps();
                    c.anchor = GridBagConstraints.NORTH;

                }
                else
                    c.anchor = GridBagConstraints.SOUTH;
            }
            dayPanelTabs[dayNumber].add(comp,c);
        }
    }

    private void addGap(int daynumber, int lowerGap)
    {
        addGap(daynumber + 1, lowerGap + 1 , daynumber, lowerGap);
    }
    
    
    
    
    
    
    //*************************************************
    //   Manipulation
    //*************************************************
    

    /** 
     * Return the JBusy at the specified week, day and gap
     *
     * @param week
     * @param day
     * @param gap
     * @return a jbusy
     * 
     */
    public JBusy locateBusyAt(int day, int gap)
    {
        System.out.println("getComponentAt() " + day + " " + gap);
        return(this.dayPanelTabs[day].getBusyAt(gap));
    }
    
    /** 
     * Return the JBusy at the specified system coordinate
     * 
     * @param p 
     * @return a jbusy
     * 
     */
    public JBusy getBusyAt(Point p)
    {
        Component comp = getComponentAt(p);

        if ( comp instanceof DayPanel )
        {
            Point newP = SwingUtilities.convertPoint(this, p, comp);
            comp = ( (DayPanel) comp ).getComponentAt(newP);
            if(comp instanceof JBusy)
                return (JBusy)comp;
            System.err.println("no busy for getBusyAt(" + p.x + "," + p.y + ")");
            return null;
        }
        return null;  
    }
    
    /** 
     * Return the JBusy at the specified system coordinate
     * @param x 
     * @param y 
     * 
     * @return a jbusy
     * 
     */
    public JBusy getBusyAt(int x, int y)
    {
        return getBusyAt(new Point(x,y));
    }
    
    
    
    /** 
     * Returns the week number for the specified system coordinate
     *
     * @param p system coordinate
     * @return the week number
     * 
     */
    public int locateDay(Point p)
    {
        if(!isALessonGap(p))
            return -1;
        return (gbl.location(p.x, p.y).x) - 1;
    }
    
    /** 
     * Returns the week number for the specified system coordinate
     *
     * @param p system coordinate
     * @return the week number
     * 
     */
    public int locateGap(Point p)
    {
        Component comp = getComponentAt(p);
        if(comp instanceof DayPanel)
        {
            Point newP = SwingUtilities.convertPoint(this,p, comp);
            JBusy busy = (JBusy)( (DayPanel) comp ).getComponentAt(newP);
            GridBagConstraints c = ((GridBagLayout)  ((DayPanel)comp).getLayout()).getConstraints(busy);
            return c.gridy;
        }
        return -1;
    }
    
    /**
     * return true if the specified system cordinate is a lesson gap
     * 
     * @param p the datagrid point
     * @return true if its a lesson gap
     * @author FlexiTeam - binou
     */
    public boolean isALessonGap(Point p)
    {
        Point p_rel = this.gbl.location(p.x,p.y);
        //System.out.println(p_rel);
        if (p_rel.x > model.getNbDays()) return false;
        return ! ( p_rel.x <= 0 || p_rel.y <= 0 );
    }
    
    
    
    
    //*************************************************
    //   Sélection
    //*************************************************

    
    /**
     * Sets the current Component selected in the planning
     * 
     * @param currentSelected
     * @param ctrl
     */
    public void setCurrentSelected(JBusy currentSelected, boolean ctrl)
    {
        if (ctrl)
        {
            if (!selectedItems.remove(currentSelected))
            {
                selectedItems.add(currentSelected);
                currentSelected.setSelected(true);
            }
            else
                currentSelected.setSelected(false);
        }
        else
        {
            for (JBusy busy : selectedItems)
            {
                busy.setSelected(false);
            }
            selectedItems.clear();
            selectedItems.add(currentSelected);
            currentSelected.setSelected(true);
        }

    }
    
    /**
     * Change the style of a gap in (x,y) and the followings, when there's a
     * drag over them
     * 
     * @param x
     * @param y
     * @param value 
     * @author FlexiTeam - binou
     */
    public void setDragOverStyle(int x, int y, boolean value)
    {
        //getComponentAt(xToWeek(x), yToDay(y),yToGapInTheDay(y)).setDragOver(value);
    }
    
    
    
    
    
    
    //*************************************************
    //   Listeners
    //*************************************************

    /**
     * Sent after the indices in the lowerGap,upperGap interval have been
     * inserted in the data model. The new interval includes both lowerGap and
     * upperGap.
     * 
     * @param e a <code>PlanningDataEvent</code> encapsulating the event
     *        information
     */
    public void intervalAdded(PlanningDataEvent e)
    {
        System.out.println("intervalAdded() de " + e.getLowerGap()); //$NON-NLS-1$
        System.out.println(e.getUpperGap());

        this.dayPanelTabs[e.getDaynumber()].removeInterval(e.getLowerGap() , e.getUpperGap());

        //repaint();
        //revalidate();
        for (int i = e.getLowerGap() ; i <= e.getUpperGap() ; i++)
            addGap(e.getDaynumber(), i);

        // System.out.println(model.getDayGapSize() + "*" +e.getDaynumber()+ "*"
        // + GAP_HEIGTH + "+" +DAY_HEIGTH+ "*" +(e.getDaynumber()+1)+"+"+
        // GAP_HEIGTH + "*" + e.getLowerGap() + "+ 2" );
        // System.out.println(x + " - " + y);
    }

    /**
     * Sent after the indices in the lowerGap,upperGap interval have been
     * removed from the data model. The interval includes both lowerGap and
     * upperGap.
     * 
     * @param e a <code>PlanningDataEvent</code> encapsulating the event
     *        information
     */
    public void intervalRemoved(PlanningDataEvent e)
    {
        e.getClass();
    }

    /**
     * Sent when the contents of the list has changed in a way that's too
     * complex to characterize with the previous methods. For example, this is
     * sent when an item has been replaced. lowerGap and upperGap bracket the
     * change.
     * 
     * @param e a <code>PlanningDataEvent</code> encapsulating the event
     *        information
     */
    public void contentsChanged(PlanningDataEvent e)
    {
        System.out.println("contentsChanged()");
        locateBusyAt(e.getDaynumber(),e.getLowerGap()).refresh();
        
        e.getClass();
    }
    
    
    
    
    
    //*************************************************
    //   Navigation
    //*************************************************
    
    
    /**
     * Change the range of week currently used for the planning <br>
     * the result will be the previous Gap of week
     */
    public void fullStepBack()
    {
        model.fullStepBack();
        this.init();
    }

    /**
     * Change the range of week currently used for the planning <br>
     * the result will be the same gap but one week earlier
     */
    public void stepBack()
    {
        model.stepBack();
        this.init();
    }

    /**
     * Change the range of week currently used for the planning <br>
     * the result will be the the same gap without the ending week
     */
    public void decrease()
    {
        model.decrease();
        this.init();
    }

    /**
     * Change the range of week currently used for the planning <br>
     * the result will be the the same gap with another week added
     */
    public void increase()
    {
        model.increase();
        this.init();
    }

    /**
     * Change the range of week currently used for the planning <br>
     * the result will be the same gap but one week later
     */
    public void stepOver()
    {
        model.stepOver();
        this.init();
    }

    /**
     * Change the range of week currently used for the planning <br>
     * the result will be the next Gap of week
     */
    public void fullStepOver()
    {
        model.fullStepOver();
        this.init();
    }

    /**
     * Decrease the size of gap's time
     */
    public void lessGapTime()
    {
        model.lessGapTime();
        this.init();
    }

    /**
     * Increase the size of gap's time
     */
    public void moreGapTime()
    {
        model.moreGapTime();
        this.init();
    }
    
    
    
    
    
    
    
    //*************************************************
    //   Classes internes
    //*************************************************

    class PopupListener extends MouseAdapter {
        public void mousePressed(MouseEvent e) {
            maybeShowPopup(e);
        }

        public void mouseReleased(MouseEvent e) {
            maybeShowPopup(e);
        }

        private void maybeShowPopup(MouseEvent e) {
            if (e.isPopupTrigger()  && isALessonGap(e.getPoint())  )
            {
                if(getModel().isALesson(locateDay(e.getPoint()),locateGap(e.getPoint())))
                    popupSeance.show(e.getComponent(),e.getX(), e.getY());
                else
                    popupVide.show(e.getComponent(),e.getX(), e.getY());
                JRessourcePlanningHebdo.this.setCurrentSelected(getBusyAt(e.getPoint()),false);
            }
        }
    }
    

    

}
