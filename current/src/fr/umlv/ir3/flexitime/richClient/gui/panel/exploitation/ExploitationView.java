/*
 * Created on 23 janv. 2005
 * by binou
 * Copyright: GPL - UMLV(FR) - 2004/2005
 */
package fr.umlv.ir3.flexitime.richClient.gui.panel.exploitation;

import java.awt.BorderLayout;
import java.awt.Cursor;
import java.rmi.RemoteException;

import javax.swing.BorderFactory;
import javax.swing.JComponent;
import javax.swing.JList;
import javax.swing.JOptionPane;
import javax.swing.JPanel;
import javax.swing.JScrollPane;
import javax.swing.JSplitPane;
import javax.swing.JTree;
import javax.swing.event.CellEditorListener;
import javax.swing.event.ChangeEvent;
import javax.swing.event.TreeSelectionEvent;
import javax.swing.event.TreeSelectionListener;
import javax.swing.tree.DefaultMutableTreeNode;
import javax.swing.tree.DefaultTreeModel;
import javax.swing.tree.TreeNode;
import javax.swing.tree.TreeSelectionModel;

import fr.umlv.ir3.flexitime.common.rmi.RemoteDataManager;
import fr.umlv.ir3.flexitime.common.tools.FlexiLanguage;
import fr.umlv.ir3.flexitime.richClient.gui.actions.management.FlexiMouseListenerFactory;
import fr.umlv.ir3.flexitime.richClient.gui.actions.management.FlexiSelectionListenerFactory;
import fr.umlv.ir3.flexitime.richClient.gui.panel.FlexiBar;
import fr.umlv.ir3.flexitime.richClient.gui.panel.exploitation.controllers.LeftMenuExploitSelectionListener;
import fr.umlv.ir3.flexitime.richClient.gui.panel.management.ClassView;
import fr.umlv.ir3.flexitime.richClient.gui.panel.management.GroupView;
import fr.umlv.ir3.flexitime.richClient.gui.panel.management.TeachingStructureView;
import fr.umlv.ir3.flexitime.richClient.gui.panel.management.TrackView;
import fr.umlv.ir3.flexitime.richClient.gui.renderers.FlexiTreeRenderer;
import fr.umlv.ir3.flexitime.richClient.models.management.ResourceTreeModel;
import fr.umlv.ir3.flexitime.richClient.models.management.RootTreeNode;
import fr.umlv.ir3.flexitime.richClient.models.management.device.RootDeviceTreeNode;
import fr.umlv.ir3.flexitime.richClient.models.management.room.RootRoomTreeNode;
import fr.umlv.ir3.flexitime.richClient.models.management.teacher.TeacherListModel;
import fr.umlv.ir3.flexitime.richClient.models.management.teachingStructure.TeachingStructureTreeNode;
import fr.umlv.ir3.flexitime.richClient.models.management.track.ClassTreeNode;
import fr.umlv.ir3.flexitime.richClient.models.management.track.ClassViewModel;
import fr.umlv.ir3.flexitime.richClient.models.management.track.GroupTreeNode;
import fr.umlv.ir3.flexitime.richClient.models.management.track.GroupViewModel;
import fr.umlv.ir3.flexitime.richClient.models.management.track.RootTrackTreeNode;
import fr.umlv.ir3.flexitime.richClient.models.management.track.TrackTreeNode;
import fr.umlv.ir3.flexitime.richClient.models.management.track.TrackViewModel;
import fr.umlv.ir3.flexitime.server.MetierSimulator;
import fr.umlv.ir3.flexitime.server.MetierSimulatorSansRmi;


/**
 * Provides the création of a Panel which contains a FlexiBar of Ressources on the left<br>
 * and a planning on the right
 * 
 * @version 1.0
 * 
 * @author FlexiTeam - binou
 */
public class ExploitationView
{
    private static FlexiLanguage language;
    static
    {
        language = FlexiLanguage.getInstance();
    }

    private JPanel panel = new JPanel(new BorderLayout());
    private RessourcePlanning ressourcePlanning;
    private TeacherListModel teacherListModel;
    private JTree treeDevice;
    private JTree treeRoom;
    private JTree treeTrack;


    
    /**
     * Creates the Exploitation View
     */
    public ExploitationView()
    {
        
        this.ressourcePlanning = new RessourcePlanning();
        //this.ressourcePlanning.setRessource(MetierSimulator.getRoussel());
        try
        {
            this.ressourcePlanning.setRessource(RemoteDataManager.getManager().getGroup());
        }
        catch (RemoteException e)
        {
            // TODO Auto-generated catch block
            e.printStackTrace();
        }
        panel.add(createPanelForComponent(createLeftFlexiBar(),language.getText("exploitBarTitle")), BorderLayout.WEST); //$NON-NLS-1$
        
        //TODO ici normalement on met null et on changera le panel suivant la selection de la flexibar dans le RessourcePlanning
        //Surement prendre la Ressource par defaut à afficher dans les preferences
        panel.add(ressourcePlanning, BorderLayout.CENTER);
    }
    
    /** 
     * Provides the panel for the exploitation view
     *
     * @return the panel
     * 
     */
    public JComponent getPanel()
    {
        return this.panel;
    }
    
    public JComponent getPrintableComponent()
    {
        return this.ressourcePlanning.getPrintableComponent();
    }

    
    
    private FlexiBar createLeftFlexiBar()
    {
        FlexiBar fb = null;
        try
        {
            // *****************************
            // Track
            // *****************************
            RootTreeNode rootTrackTree = new RootTrackTreeNode(null,
                    RemoteDataManager.getManager().getTracks());
            treeTrack = createJTree(rootTrackTree);
            treeTrack.addTreeSelectionListener(LeftMenuExploitSelectionListener.createTrackTreeSelectionListener(ressourcePlanning));
            JScrollPane scrollTrack = new JScrollPane(treeTrack);
            scrollTrack
                    .setHorizontalScrollBarPolicy(JScrollPane.HORIZONTAL_SCROLLBAR_AS_NEEDED);

            // *****************************
            // Room
            // *****************************
            RootTreeNode rootRoomTree = new RootRoomTreeNode(null,
                    RemoteDataManager.getManager().getBuildings());
            treeRoom = createJTree(rootRoomTree);
            treeRoom.addTreeSelectionListener(LeftMenuExploitSelectionListener.createRoomTreeSelectionListener(ressourcePlanning));
            JScrollPane scrollRoom = new JScrollPane(treeRoom);
            scrollRoom
                    .setHorizontalScrollBarPolicy(JScrollPane.HORIZONTAL_SCROLLBAR_AS_NEEDED);

            // *****************************
            // Device
            // *****************************
            RootTreeNode rootDeviceTree;
            rootDeviceTree = new RootDeviceTreeNode(null, RemoteDataManager
                    .getManager().getDevices());
            treeDevice = createJTree(rootDeviceTree);
            treeDevice.addTreeSelectionListener(LeftMenuExploitSelectionListener.createDeviceTreeSelectionListener(ressourcePlanning));
            JScrollPane scrollDevice = new JScrollPane(treeDevice);
            scrollDevice
                    .setHorizontalScrollBarPolicy(JScrollPane.HORIZONTAL_SCROLLBAR_AS_NEEDED);
            //treeDevice.setCellRenderer(new FlexiTreeRenderer());

            //*****************************
            //  Teacher
            //*****************************

            teacherListModel = new TeacherListModel(RemoteDataManager
                    .getManager().getTeachers());
            

            JList teacherList = new JList(teacherListModel);
            teacherList.addListSelectionListener(LeftMenuExploitSelectionListener.createTeacherListSelectionListener(ressourcePlanning));

            fb = new FlexiBar();
            fb.add(language.getText("tracks"), treeTrack); //$NON-NLS-1$
            fb.add(language.getText("rooms"), treeRoom); //$NON-NLS-1$
            fb.add(language.getText("devices"), treeDevice); //$NON-NLS-1$
            fb.add(language.getText("teachers"), teacherList); //$NON-NLS-1$

        }
        catch (RemoteException e)
        {
            e.printStackTrace();
        }

        return fb;
    }
    
    private JTree createJTree(RootTreeNode rootTree)
    {
        final ResourceTreeModel model = new ResourceTreeModel(rootTree);
        rootTree.setModel(model);
        final JTree tmpTree = new JTree(model);
        tmpTree.getSelectionModel().setSelectionMode(TreeSelectionModel.SINGLE_TREE_SELECTION);
        tmpTree.setRootVisible(false);
        tmpTree.setCursor(new Cursor(Cursor.HAND_CURSOR));
        tmpTree.setAutoscrolls(true);
        
        tmpTree.setEditable(false);

        return tmpTree;
    }
    
    
    private static JPanel createPanelForComponent(JComponent comp, String title)
    {
        JPanel panel = new JPanel(new BorderLayout());
        panel.add(comp, BorderLayout.CENTER);
        if (title != null)
        {
            panel.setBorder(BorderFactory.createTitledBorder(title));
        }
        return panel;
    }
    
    /** 
     * Returns the type of the planning currently used<br>
     * 
     * @return the mode of the planning currently used
     * 
     * @see RessourcePlanning defines the static values
     */
    public int getMode()
    {
        return ressourcePlanning.getMode();
    }

    
    /** 
     * Change the range of week currently used for the planning<br>
     * the result will be the previous Gap of week
     */
    public void fullStepBack()
    {
        ressourcePlanning.fullStepBack();
    }
    
    /** 
     * Change the range of week currently used for the planning<br>
     * the result will be the same gap but one week earlier
     */
    public void stepBack()
    {
        ressourcePlanning.stepBack();
    }
    
    /** 
     * Change the range of week currently used for the planning<br>
     * the result will be the the same gap without the ending week
     */
    public void decrease()
    {
        ressourcePlanning.decrease();
    }
    
    /** 
     * Change the range of week currently used for the planning<br>
     * the result will be the the same gap with another week added
     */
    public void increase()
    {
        ressourcePlanning.increase();
    }
    
    /** 
     * Change the range of week currently used for the planning<br>
     * the result will be the same gap but one week later
     */
    public void stepOver()
    {
        ressourcePlanning.stepOver();
    }
    
    /** 
     * Change the range of week currently used for the planning<br>
     * the result will be the next Gap of week
     */
    public void fullStepOver()
    {
        ressourcePlanning.fullStepOver();
    }
    
    /** 
     * Decrease the size of gap's time
     */
    public void lessGapTime()
    {
        ressourcePlanning.lessGapTime();
    }
    
    /** 
     * Increase the size of gap's time
     */
    public void moreGapTime()
    {
        ressourcePlanning.moreGapTime();
    }
    
   
    
    

}

