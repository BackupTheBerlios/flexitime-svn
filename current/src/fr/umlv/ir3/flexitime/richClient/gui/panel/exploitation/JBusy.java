/*
 * Created on 12 janv. 2005
 * by binou
 * Copyright: GPL - UMLV(FR) - 2004/2005
 */
package fr.umlv.ir3.flexitime.richClient.gui.panel.exploitation;

import java.awt.Color;
import java.awt.Container;
import java.awt.Dimension;
import java.awt.Font;
import java.awt.Point;
import java.awt.event.InputEvent;
import java.awt.event.MouseEvent;

import javax.swing.BorderFactory;
import javax.swing.JLabel;
import javax.swing.SwingUtilities;
import javax.swing.event.MouseInputAdapter;

import fr.umlv.ir3.flexitime.common.data.activity.ILesson;
import fr.umlv.ir3.flexitime.common.gui.models.BusyBloc;
import fr.umlv.ir3.flexitime.common.tools.FlexiLanguage;





/**
 * A extended JLabel redefined to encapsulate and represent a Busy
 * 
 * @version Verion ou révision SVN
 * 
 * @author FlexiTeam - binou
 */
public class JBusy extends JLabel
{
	/**
     * Comment for <code>serialVersionUID</code>
     */
    private static final long serialVersionUID = 3258411712125352247L;
    private static FlexiLanguage language;
    static
    {
        language = FlexiLanguage.getInstance();
    }
    
    BusyBloc busy = null;
    
    boolean isSelected = false;
    private int width;
    private int heigth;
    
    
    
    
    //**********************
    //	Constructeurs
    //**********************
    /**
     * creates a new JBusy
     * @param _width 
     * @param _heigth 
     */
    public JBusy(int _width, int _heigth)
    {
        this.busy = null;
        this.width = _width;
        this.heigth = _heigth;
        
		MouseEventForwarder forwarder = new MouseEventForwarder();
		addMouseListener(forwarder);
		addMouseMotionListener(forwarder);
        
        this.setOpaque(true);
        this.setText("");
        this.setBackground(Color.WHITE);
        this.setBorder(BorderFactory.createLineBorder(Color.LIGHT_GRAY));
        this.setPreferredSize(new Dimension(width,heigth));
    }
    
    
    /**
     * Creates a new JBusy based on an other one
     * @param busyBloc
     */
    public JBusy(BusyBloc busyBloc, int _width, int _heigth)
    {
        this.busy = busyBloc;
        this.width = _width;
        this.heigth = _heigth;

        MouseEventForwarder forwarder = new MouseEventForwarder();
        addMouseListener(forwarder);
        addMouseMotionListener(forwarder);

        this.setOpaque(true);
        this.setBorder(BorderFactory.createLineBorder(Color.BLACK));
        this.setPreferredSize(new Dimension(width,
                heigth * busyBloc.getNbGap()));
        
        if(busyBloc.getBusy() instanceof ILesson)
        {
            ILesson lesson = (ILesson)(busyBloc.getBusy());
            this.setFont(new Font("Serif", Font.PLAIN, 9));
            this.setBackground(lesson.getCourse().getColor());
            this.setText("<html>" + lesson.getCourse().getName() + " "
                    + language.formatShortTime(lesson.getGap().getStartDate()) + "/"
                    + language.formatShortTime(lesson.getGap().getEndDate()) + "</html>");
            this.setToolTipText("<html>" + lesson.getCourse().getName() + "<br>"
                    + language.formatShortTime(lesson.getGap().getStartDate()) + "/"
                    + language.formatShortTime(lesson.getGap().getEndDate())
                    + "<br> blablabla </html>");
        }
    }

    
    
    /** 
     * Tells if the component is selected or not
     *
     * @return true if the component is selected
     * 
     */
    public boolean isSelected()
    { return isSelected;}
    
    /** 
     * Change the style of the component it's selected or not
     *
     * @param value 
     * 
     */
    public void setSelected(boolean value)
    {
        this.isSelected=value;
        if(value)
        {
            this.setBorder(BorderFactory.createLineBorder(Color.RED));
        }
        else
        {
            if(busy == null)
                this.setBorder(BorderFactory.createLineBorder(Color.LIGHT_GRAY));
            else
                this.setBorder(BorderFactory.createLineBorder(Color.BLACK));
        }
    }
    
    /** 
     * Change the component style if there's a drag or not over it
     *
     * @param b 
     * 
     * @author   FlexiTeam - binou
     */
    public void setDragOver(boolean b)
    {
        //System.out.println("drag = " + b);
        if(b == true)
            this.setBackground(Color.GREEN);
        else
            this.setBackground(Color.WHITE);
    }
    
    
    

  
	/** 
	 * Should normally be in a model
	 *
	 * @return the lesson of the component
	 */
	public BusyBloc getBusy() {
		return busy;
	}
	
	/** 
	 * Returns the gap's size of the component 
	 *
	 * @return the gap's size of the component 
	 * 
	 */
	public int getNbGaps()
	{
		if(busy == null)
			return 1;
        
		return busy.getNbGap();
	}
	
	
	final class MouseEventForwarder extends MouseInputAdapter {
		/** 
		 * @see javax.swing.event.MouseInputAdapter#mousePressed(java.awt.event.MouseEvent)
		 * @author   FlexiTeam - binou
		 */
		public void mousePressed(MouseEvent e) {
	    	
	    	//forward
			Container parent = getParent();
			if (parent != null) {
				Point newPoint = SwingUtilities.convertPoint(JBusy.this, e.getPoint(), parent);
				e.translatePoint(newPoint.x-e.getX(), newPoint.y-e.getY());
				e.setSource(parent);
				parent.dispatchEvent(e);
			}
		}

		/** 
		 * @param e 
		 * 
		 * @see javax.swing.event.MouseInputAdapter#mouseReleased(java.awt.event.MouseEvent)
		 * @author   FlexiTeam - binou
		 */
		public void mouseReleased(MouseEvent e) {
			Container parent = getParent();
			if (parent != null) {
				Point newPoint = SwingUtilities.convertPoint(JBusy.this, e.getPoint(), parent);
				e.translatePoint(newPoint.x-e.getX(), newPoint.y-e.getY());
				e.setSource(parent);
				parent.dispatchEvent(e);			
			}
		}


		/** 
		 * @see javax.swing.event.MouseInputAdapter#mouseDragged(java.awt.event.MouseEvent)
		 * @author   FlexiTeam - binou
		 */
		public void mouseDragged(MouseEvent e) {
			Container parent = getParent();
			if (parent != null) {
				Point newPoint = SwingUtilities.convertPoint(JBusy.this, e.getPoint(), parent);
				e.translatePoint(newPoint.x-e.getX(), newPoint.y-e.getY());
				e.setSource(parent);
				parent.dispatchEvent(e);
			}
		}
		
	    /** 
	     * @see javax.swing.event.MouseInputAdapter#mouseClicked(java.awt.event.MouseEvent)
	     * @author   FlexiTeam - binou
	     */
	    public void mouseClicked(MouseEvent e)
	    {
            int ctrlMask = InputEvent.CTRL_DOWN_MASK;
            boolean ctrl = ((e.getModifiersEx() & ctrlMask) == ctrlMask) ?
                  true : false;
            System.out.println(ctrl);
            //c juste pour virer le warning :p
            e.getY();
	    	//setSelected(!isSelected());
	    	((JRessourcePlanning)JBusy.this.getParent()).setCurrentSelected(JBusy.this, ctrl);
	    }
		
		
	}






	
	
}

