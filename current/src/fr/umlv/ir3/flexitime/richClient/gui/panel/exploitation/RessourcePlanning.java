/*
 * Created on 21 janv. 2005
 * by binou
 * Copyright: GPL - UMLV(FR) - 2004/2005
 */
package fr.umlv.ir3.flexitime.richClient.gui.panel.exploitation;

import java.awt.BorderLayout;
import java.util.List;

import javax.swing.BorderFactory;
import javax.swing.DefaultListModel;
import javax.swing.JComponent;
import javax.swing.JList;
import javax.swing.JPanel;
import javax.swing.JScrollPane;
import javax.swing.JTree;
import javax.swing.ListSelectionModel;
import javax.swing.tree.DefaultMutableTreeNode;
import javax.swing.tree.DefaultTreeModel;
import javax.swing.tree.TreeSelectionModel;

import fr.umlv.ir3.flexitime.common.data.resources.IGroup;
import fr.umlv.ir3.flexitime.common.data.resources.IResource;
import fr.umlv.ir3.flexitime.common.gui.models.RessourcePlanningHebdoModelAdapter;
import fr.umlv.ir3.flexitime.common.gui.models.RessourcePlanningModel;
import fr.umlv.ir3.flexitime.common.tools.Gap;
import fr.umlv.ir3.flexitime.common.tools.Time;
import fr.umlv.ir3.flexitime.richClient.gui.panel.FlexiBar;



/**
 * DOCME Description
 * explication supplémentaire si nécessaire
 * in english please...
 * Que fait cette classe, qu'est-ce qu'elle 
 * représente, ...
 * 
 * @version Verion ou révision SVN
 * 
 * @author FlexiTeam - binou
 */
public class RessourcePlanning extends JPanel
{
    public static final int MODE_TRIM = 1;
    public static final int MODE_HEBDO = 2;
    public static final int MODE_MULTI = 3;
    
    private int mode = 0;
    
    private JRessourcePlanning planningTrim = null;
    private JRessourcePlanningHebdo planningHebdo = null;
    private JRessourcesPlanning planningMulti = null;
    
    private Object ressource;
    private Gap initialGap;
    private FlexiBar bar;
    
    
    //********************
    // Debugging
    //******************
    
    private JList teacherList;
    private JTree tsTree;
    
    
    /**
     * Creates a RessourcePlanning 
     * 
     */
    public RessourcePlanning()
    {
        super(new BorderLayout());
        
        //TODO lire la config ici
        this.initialGap = new Gap(2005,1,3,0,1,2005,1,16,23,59);
        this.ressource = null;
        
    }
    
    public void setRessource(Object _ressource)
    {
        if(_ressource == null)
            return;
        this.ressource = _ressource;
        
        //Si on etait en mode trim ou hebdo, on recupere la créneau visualisé précédemment
        if(mode != 0)
            if(mode == RessourcePlanning.MODE_TRIM)
                this.initialGap = planningTrim.getModel().getCurrentGap();
            else if(mode == RessourcePlanning.MODE_HEBDO)
                this.initialGap = planningHebdo.getModel().getCurrentGap();
        
        cleanPanel();
        
        if(ressource instanceof List)
            this.mode = RessourcePlanning.MODE_MULTI;
        else if(Time.getGapWeek(this.initialGap.getStartDate(), this.initialGap.getEndDate())+1 > 1)
            this.mode = RessourcePlanning.MODE_TRIM;
        else
            this.mode = RessourcePlanning.MODE_HEBDO;
        
        createPlanning();
    }

    
    
    public int getMode()
    {
        return mode;
    }
    
    private void createPlanning()
    {
        if(this.ressource instanceof IResource)
        {
            if(this.mode == RessourcePlanning.MODE_TRIM)
            {
                System.out.println("Affichage Trim");
                this.mode = RessourcePlanning.MODE_TRIM;
                planningTrim = new JRessourcePlanning(new RessourcePlanningModel((IResource)this.ressource, this.initialGap));
                this.add(new JScrollPane(createPanelForComponent(planningTrim,"EDT")), BorderLayout.CENTER);
                if(this.ressource instanceof IGroup)
                    createRightFlexiBar();
            }
            else
            {
                System.out.println("Affichage hebdo");
                this.mode = RessourcePlanning.MODE_HEBDO;
                planningHebdo = new JRessourcePlanningHebdo(new RessourcePlanningHebdoModelAdapter((IResource)this.ressource, this.initialGap));
                this.add(new JScrollPane(createPanelForComponent(planningHebdo,"EDT")), BorderLayout.CENTER);
                if(this.ressource instanceof IGroup)
                    createRightFlexiBar();
            }
        }
        else if(this.ressource instanceof List)
        {
            System.out.println("Affichage multiple");
        }
    }
    
    
    private void switchToHebdo()
    {
        this.mode = RessourcePlanning.MODE_HEBDO;
        
        //On opère la décrémentation pour passer à 1 semaine
        this.initialGap = this.planningTrim.getModel().getCurrentGap();
        this.initialGap.getEndDate().addWeek(-1);
        
        this.cleanPanel();
        this.createRightFlexiBar();
        
        this.planningHebdo = new JRessourcePlanningHebdo(new RessourcePlanningHebdoModelAdapter((IResource)this.ressource, this.initialGap));
        this.add(new JScrollPane(createPanelForComponent(planningHebdo,"EDT")), BorderLayout.CENTER);
    }

    private void switchToTrim()
    {
        this.mode = RessourcePlanning.MODE_TRIM;
        
        //On opère la décrémentation pour passer à 1 semaine
        this.initialGap = this.planningHebdo.getModel().getCurrentGap();
        this.initialGap.getEndDate().addWeek(1);
        
        this.cleanPanel();
        this.createRightFlexiBar();
        
        this.planningTrim = new JRessourcePlanning(new RessourcePlanningModel((IResource)this.ressource, this.initialGap));
        this.add(new JScrollPane(createPanelForComponent(planningTrim,"EDT")), BorderLayout.CENTER);
        
    }
    
    private void cleanPanel()
    {
        this.planningHebdo = null;
        this.planningTrim = null;
        this.planningMulti = null;
        this.removeAll();
        this.revalidate();
    }
    

    
    private void createRightFlexiBar()
    {
        if(bar == null)
        {
            DefaultMutableTreeNode rootNode3 = new DefaultMutableTreeNode("Structure d'enseignement");
            DefaultMutableTreeNode subGroup1 = new DefaultMutableTreeNode("General");
            DefaultMutableTreeNode subGroup2 = new DefaultMutableTreeNode("Rezo");
            rootNode3.add(subGroup1);
            rootNode3.add(subGroup2);
            DefaultMutableTreeNode sub1 = new DefaultMutableTreeNode("J2EE");
            DefaultMutableTreeNode sub2 = new DefaultMutableTreeNode("GL");
            DefaultMutableTreeNode sub3 = new DefaultMutableTreeNode("pwet pwet");
            subGroup1.add(sub1);
            subGroup1.add(sub2);
            subGroup1.add(sub3);
            DefaultMutableTreeNode sub4 = new DefaultMutableTreeNode("Exposé ReZo");
            DefaultMutableTreeNode sub5 = new DefaultMutableTreeNode("Modélisation des ReZo");
            subGroup2.add(sub4);
            subGroup2.add(sub5);
            DefaultTreeModel model3 = new DefaultTreeModel(rootNode3);
            tsTree = new JTree(model3);
            tsTree.getSelectionModel().setSelectionMode(TreeSelectionModel.DISCONTIGUOUS_TREE_SELECTION);
            
            DefaultListModel listModel = new DefaultListModel();
            listModel.addElement("Midonnet");
            listModel.addElement("Revuz");
            listModel.addElement("Cervelle ... aie");
            teacherList = new JList(listModel);
            teacherList.setSelectionMode(ListSelectionModel.SINGLE_INTERVAL_SELECTION);
            
            bar = new FlexiBar();
            bar.add("Matieres", tsTree);
            bar.add("Profs", teacherList);
        }
        
        this.add(new JScrollPane(createPanelForComponent(bar,"Ajouter...")), BorderLayout.EAST);
    }
    

    
   

    
    private static JPanel createPanelForComponent(JComponent comp, String title)
    {
        JPanel panel = new JPanel(new BorderLayout());
        panel.add(comp, BorderLayout.CENTER);
        if (title != null)
        {
            panel.setBorder(BorderFactory.createTitledBorder(title));
        }
        return panel;
    }
    
    
    
    
    
    public void fullStepBack()
    {
        switch(mode)
        {
            case RessourcePlanning.MODE_HEBDO :
                System.out.println("fullStepBack() en mode Hebdo");
                //planningHebdo.fullStepBack();
                break;
            case RessourcePlanning.MODE_MULTI :
                System.err.println("On ne doit pas pouvoir lancer cette action en mode multi !!!");
                break;
            case RessourcePlanning.MODE_TRIM :
                System.out.println("fullStepBack() en mode Trim");
                planningTrim.fullStepBack();
                break;
        }
        
    }
    
    public void stepBack()
    {
        switch(mode)
        {
            case RessourcePlanning.MODE_HEBDO :
                System.out.println("stepBack() en mode Hebdo");
                //planningHebdo.fullStepBack();
                break;
            case RessourcePlanning.MODE_MULTI :
                System.err.println("On ne doit pas pouvoir lancer cette action en mode multi !!!");
                break;
            case RessourcePlanning.MODE_TRIM :
                System.out.println("stepBack() en mode Trim");
                planningTrim.stepBack();
                break;
        }
    }
    
    public void decrease()
    {
        switch(mode)
        {
            case RessourcePlanning.MODE_HEBDO :
                System.err.println("On ne doit pas pouvoir lancer cette action en mode hebdo !!!");
                break;
            case RessourcePlanning.MODE_MULTI :
                System.err.println("On ne doit pas pouvoir lancer cette action en mode multi !!!");
                break;
            case RessourcePlanning.MODE_TRIM :
                if(planningTrim.getModel().getNbWeeks() == 2)
                {
                    this.switchToHebdo();
                }
                else
                {
                    System.out.println("decrease() en mode Trim");
                    planningTrim.decrease();
                }
                break;
                    
        }
    }
    


    public void increase()
    {
        switch(mode)
        {
            case RessourcePlanning.MODE_HEBDO :
                this.switchToTrim();
                break;
            case RessourcePlanning.MODE_MULTI :
                System.err.println("On ne doit pas pouvoir lancer cette action en mode multi !!!");
                break;
            case RessourcePlanning.MODE_TRIM :
                System.out.println("increase() en mode Trim");
                planningTrim.increase();
                break;
        }
    }


    public void stepOver()
    {
        switch(mode)
        {
            case RessourcePlanning.MODE_HEBDO :
                System.out.println("stepOver() en mode Hebdo");
                //planningHebdo.fullStepBack();
                break;
            case RessourcePlanning.MODE_MULTI :
                System.err.println("On ne doit pas pouvoir lancer cette action en mode multi !!!");
                break;
            case RessourcePlanning.MODE_TRIM :
                System.out.println("stepOver() en mode Trim");
                planningTrim.stepOver();
                break;
        }
    }
    
    /** 
     * DOCME Description
     * Quel service est rendu par cette méthode
     * <code>exemple d'appel de la methode</code>
     * 
     * 
     * @see (si nécessaire)
     */
    public void fullStepOver()
    {
        switch(mode)
        {
            case RessourcePlanning.MODE_HEBDO :
                System.out.println("fullStepOver() en mode Hebdo");
                //planningHebdo.fullStepBack();
                break;
            case RessourcePlanning.MODE_MULTI :
                System.err.println("On ne doit pas pouvoir lancer cette action en mode multi !!!");
                break;
            case RessourcePlanning.MODE_TRIM :
                System.out.println("fullStepOver() en mode Trim");
                planningTrim.fullStepOver();
                break;
        }
    }
    

}

