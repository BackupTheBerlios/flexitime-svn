

/*
 * Created on 24 janv. 2005
 * by binou
 * Copyright: GPL - UMLV(FR) - 2004/2005
 */
package fr.umlv.ir3.flexitime.richClient.gui.panel;

import java.awt.BorderLayout;
import java.awt.Dimension;
import java.awt.FlowLayout;
import java.awt.event.ActionEvent;
import java.awt.event.ActionListener;

import javax.swing.JButton;
import javax.swing.JFrame;
import javax.swing.JPanel;

import fr.umlv.ir3.flexitime.richClient.gui.actions.bar.LargerTimeTableAction;
import fr.umlv.ir3.flexitime.richClient.gui.actions.bar.NextGapAction;
import fr.umlv.ir3.flexitime.richClient.gui.actions.bar.NextWeekAction;
import fr.umlv.ir3.flexitime.richClient.gui.actions.bar.PreviousGapAction;
import fr.umlv.ir3.flexitime.richClient.gui.actions.bar.PreviousWeekAction;
import fr.umlv.ir3.flexitime.richClient.gui.actions.bar.SmallerTimeTableAction;
import fr.umlv.ir3.flexitime.richClient.gui.panel.exploitation.ExploitationView;


/**
 * DOCME Description
 * explication supplémentaire si nécessaire
 * in english please...
 * Que fait cette classe, qu'est-ce qu'elle 
 * représente, ...
 * 
 * @version Verion ou révision SVN
 * @see (si nécessaire)
 * 
 * @author FlexiTeam - binou
 */
public class TestExploitationView
{
    private static ExploitationView view;
    
    /**
     * Create the GUI and show it. For thread safety, this method should be
     * invoked from the event-dispatching thread.
     */
    private static void createAndShowGUI()
    {
        //Make sure we have nice window decorations.
        JFrame.setDefaultLookAndFeelDecorated(true);

        //Create and set up the window.
        JFrame frame = new JFrame("Exploitation View Demo");
        frame.setDefaultCloseOperation(JFrame.EXIT_ON_CLOSE);
        //frame.setBounds(0,0,800,800);
        frame.setPreferredSize(new Dimension(1000,750));
        //Set up the content pane.
        //JButton b3 = new JButton("Paye ta Toolbar !");
        JButton statusbar = new JButton("Statusbar ... on fait comme on peut ...");
        view = new ExploitationView();
        
        
//      DEBUGGING
        JButton gap1 = new JButton("gapTime + petit");
        gap1.addActionListener(new ActionListener() {

            public void actionPerformed(ActionEvent e)
            {
                view.lessGapTime();
            }
        });
        JButton gap2 = new JButton("gapTime + grand");
        gap2.addActionListener(new ActionListener() {

            public void actionPerformed(ActionEvent e)
            {
                view.moreGapTime();
            }
        });
        JPanel toolbar = new JPanel();
        FlowLayout bl = new FlowLayout();
        toolbar.setLayout(bl);
        JButton b5 = new JButton("<<");
        b5.addActionListener(new ActionListener() {

            public void actionPerformed(ActionEvent e)
            {
                view.fullStepBack();
            }
        });
        //b5.setAction(PreviousGapAction.getInstance(view));
        JButton b3 = new JButton("<");
        b3.addActionListener(new ActionListener() {

            public void actionPerformed(ActionEvent e)
            {
                view.stepBack();
            }
        });
        //b3.setAction(PreviousWeekAction.getInstance(view));
        JButton b2 = new JButton("-");
        b2.addActionListener(new ActionListener() {

            public void actionPerformed(ActionEvent e)
            {
                view.decrease();
            }
        });
        //b5.setAction(SmallerTimeTableAction.getInstance(view));
        JButton b = new JButton("+");
        b.addActionListener(new ActionListener() {

            public void actionPerformed(ActionEvent e)
            {
                view.increase();
            }
        });
        //b.setAction(LargerTimeTableAction.getInstance(view));
        JButton b4 = new JButton(">");
        b4.addActionListener(new ActionListener() {

            public void actionPerformed(ActionEvent e)
            {
                view.stepOver();
            }
        });
        //b4.setAction(NextWeekAction.getInstance(view));
        JButton b6 = new JButton(">>");
        b6.addActionListener(new ActionListener() {

            public void actionPerformed(ActionEvent e)
            {
                view.fullStepOver();
            }
        });
        //b6.setAction(NextGapAction.getInstance(view));*/


        toolbar.add(gap1);
        toolbar.add(gap2);
        toolbar.add(b5);
        toolbar.add(b3);
        toolbar.add(b2);
        toolbar.add(b);
        toolbar.add(b4);
        toolbar.add(b6);
        
        
        
        frame.getContentPane().add(toolbar, BorderLayout.NORTH);
        frame.getContentPane().add(statusbar, BorderLayout.SOUTH);
        frame.getContentPane().add(view.getPanel(), BorderLayout.CENTER);
         
        
        //);

        //Display the window.
        frame.pack();
        frame.setVisible(true);
    }

    public static void main(String[] args)
    {
        //Schedule a job for the event-dispatching thread:
        //creating and showing this application's GUI.
        javax.swing.SwingUtilities.invokeLater(new Runnable() {

            public void run()
            {
                createAndShowGUI();
            }
        }); 
    }

}

