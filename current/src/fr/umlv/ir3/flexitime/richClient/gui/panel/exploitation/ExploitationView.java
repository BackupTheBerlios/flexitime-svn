/*
 * Created on 23 janv. 2005
 * by binou
 * Copyright: GPL - UMLV(FR) - 2004/2005
 */
package fr.umlv.ir3.flexitime.richClient.gui.panel.exploitation;

import java.awt.BorderLayout;
import java.awt.Dimension;

import javax.swing.BorderFactory;
import javax.swing.JButton;
import javax.swing.JComponent;
import javax.swing.JFrame;
import javax.swing.JPanel;
import javax.swing.JTree;
import javax.swing.tree.DefaultMutableTreeNode;
import javax.swing.tree.DefaultTreeModel;
import javax.swing.tree.TreeSelectionModel;

import fr.umlv.ir3.flexitime.common.tools.Gap;
import fr.umlv.ir3.flexitime.richClient.gui.panel.FlexiBar;
import fr.umlv.ir3.flexitime.server.MetierSimulator;


/**
 * DOCME Description
 * explication supplémentaire si nécessaire
 * in english please...
 * Que fait cette classe, qu'est-ce qu'elle 
 * représente, ...
 * 
 * @version Verion ou révision SVN
 * @see (si nécessaire)
 * 
 * @author FlexiTeam - binou
 */
public class ExploitationView
{
    private JPanel panel = new JPanel(new BorderLayout());
    private RessourcePlanning ressourcePlanning;
    private Gap gapToDisplay = new Gap(2005,1,3,0,1,2005,1,9,23,59);
    
    
    public ExploitationView()
    {
        this.ressourcePlanning = new RessourcePlanning(this.gapToDisplay);
        panel.add(createPanelForComponent(createLeftFlexiBar(),"Visualiser ..."), BorderLayout.WEST);
        //TODO ici normalement on met null et on changera le panel suivant la selection de la flexibar dans le RessourcePlanning
        //Surement prendre la Ressource par defaut à afficher dans les preferences
        panel.add(ressourcePlanning.getPanel(MetierSimulator.getGroup2IR3()), BorderLayout.CENTER);

    }
    
    public JComponent getPanel()
    {
        return this.panel;
    }

    
    
    private static FlexiBar createLeftFlexiBar()
    {
        
        //TODO créer la véritable flexibar => choper celle de guigui
        DefaultMutableTreeNode rootNode = new DefaultMutableTreeNode("Bâtiments");
        DefaultMutableTreeNode sharon = new DefaultMutableTreeNode("Copernic");
        rootNode.add(sharon);
        DefaultMutableTreeNode maya = new DefaultMutableTreeNode("Rez de chaussée");
        sharon.add(maya);
        sharon.add(new DefaultMutableTreeNode("1er étage"));
        DefaultMutableTreeNode anya = new DefaultMutableTreeNode("2ème étage");
        sharon.add(anya);
        maya.add(new DefaultMutableTreeNode("auditorium"));
        anya.add(new DefaultMutableTreeNode("2027"));
        DefaultTreeModel model = new DefaultTreeModel(rootNode);
        JTree roomTree = new JTree(model);
        roomTree.getSelectionModel().setSelectionMode(TreeSelectionModel.DISCONTIGUOUS_TREE_SELECTION);
        
//      Create a tree.
        DefaultMutableTreeNode rootNode2 = new DefaultMutableTreeNode("Filieres");
        DefaultMutableTreeNode track1 = new DefaultMutableTreeNode("IR");
        DefaultMutableTreeNode track2 = new DefaultMutableTreeNode("MFPI");
        rootNode2.add(track1);
        rootNode2.add(track2);
        DefaultMutableTreeNode class1 = new DefaultMutableTreeNode("1ere année");
        DefaultMutableTreeNode class2 = new DefaultMutableTreeNode("2eme année");
        DefaultMutableTreeNode class3 = new DefaultMutableTreeNode("3eme année");
        track1.add(class1);
        track1.add(class2);
        track1.add(class3);
        DefaultMutableTreeNode group1 = new DefaultMutableTreeNode("Groupe 1");
        DefaultMutableTreeNode group2 = new DefaultMutableTreeNode("Groupe 2");
        class1.add(group1);
        class1.add(group2);
        class2.add(group1);
        class2.add(group2);
        class3.add(group1);
        class3.add(group2);
        DefaultTreeModel model2 = new DefaultTreeModel(rootNode2);
        JTree trackTree = new JTree(model2);
        trackTree.getSelectionModel().setSelectionMode(TreeSelectionModel.DISCONTIGUOUS_TREE_SELECTION);
        
        FlexiBar fb = new FlexiBar();
        fb.add("Filières", trackTree);
        fb.add("Salles", roomTree);
        
        return fb;
    }
    
    
    private static JPanel createPanelForComponent(JComponent comp, String title)
    {
        JPanel panel = new JPanel(new BorderLayout());
        panel.add(comp, BorderLayout.CENTER);
        if (title != null)
        {
            panel.setBorder(BorderFactory.createTitledBorder(title));
        }
        return panel;
    }
    
    
    
    
    //************************************
    //
    //  DEBUGGING DEMO
    //
    //************************************
    
    
    /**
     * Create the GUI and show it. For thread safety, this method should be
     * invoked from the event-dispatching thread.
     */
    private static void createAndShowGUI()
    {
        //Make sure we have nice window decorations.
        JFrame.setDefaultLookAndFeelDecorated(true);

        //Create and set up the window.
        JFrame frame = new JFrame("Exploitation View Demo");
        frame.setDefaultCloseOperation(JFrame.EXIT_ON_CLOSE);
        //frame.setBounds(0,0,800,800);
        frame.setPreferredSize(new Dimension(1000,750));
        //Set up the content pane.
        JButton b3 = new JButton("Paye ta Toolbar !");
        JButton b4 = new JButton("Statusbar ... on fait comme on peut ...");
        ExploitationView view = new ExploitationView();
        frame.getContentPane().add(createPanelForComponent(b3,"Toolbar"), BorderLayout.NORTH);
        frame.getContentPane().add(createPanelForComponent(b4,"StatusBar"), BorderLayout.SOUTH);
        
        frame.getContentPane().add(view.getPanel(), BorderLayout.CENTER);
         
        
        //);

        //Display the window.
        frame.pack();
        frame.setVisible(true);
    }

    public static void main(String[] args)
    {
        //Schedule a job for the event-dispatching thread:
        //creating and showing this application's GUI.
        javax.swing.SwingUtilities.invokeLater(new Runnable() {

            public void run()
            {
                createAndShowGUI();
            }
        }); 
    }
}

