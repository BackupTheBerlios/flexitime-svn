/*
 * Created on 26 janv. 2005
 * by binou
 * Copyright: GPL - UMLV(FR) - 2004/2005
 */

package fr.umlv.ir3.flexitime.richClient.gui.panel.exploitation.controllers;

import java.awt.AlphaComposite;
import java.awt.Graphics2D;
import java.awt.Point;
import java.awt.dnd.DragGestureEvent;
import java.awt.dnd.DragGestureListener;
import java.awt.dnd.DragSource;
import java.awt.image.BufferedImage;

import javax.swing.SwingUtilities;

import fr.umlv.ir3.flexitime.richClient.gui.panel.exploitation.JBusy;
import fr.umlv.ir3.flexitime.richClient.gui.panel.exploitation.JRessourcePlanningHebdo;
import fr.umlv.ir3.flexitime.richClient.gui.panel.exploitation.TransferableLessonBloc;

/**
 * Implements the drag gesture for a JRessourcePlanning
 * 
 * @version Verion ou révision SVN
 * 
 * @author FlexiTeam - binou
 */
public class HebdoComponentDragGestureListener implements DragGestureListener
{

    private final ComponentDragSourceListener       tdsl;
    private final JRessourcePlanningHebdo           planning;
    private final DragSource                        dragSource;

    /**
     * DOCME 
     * @param _planning 
     * @param _dragSource 
     * @param tdsl 
     */
    public HebdoComponentDragGestureListener(JRessourcePlanningHebdo _planning,
            DragSource _dragSource, ComponentDragSourceListener tdsl)
    {
        this.dragSource = _dragSource;
        this.tdsl = tdsl;
        this.planning = _planning;
    }

    /**
     * @see java.awt.dnd.DragGestureListener#dragGestureRecognized(java.awt.dnd.DragGestureEvent)
     * @author FlexiTeam - binou
     */
    public void dragGestureRecognized(DragGestureEvent dge)
    {

        //System.out.println("dragGesture");
        Point p_abs = dge.getDragOrigin();
        
        

        JBusy jbusy = planning.getBusyAt(p_abs);
        
        if(jbusy == null)
        {
            System.out.println("Mauvais drag at " + System.currentTimeMillis());
            return;
        }
        if ( jbusy.getBusy() == null)
        {
            System.out.println("Mauvais drag : ce n'est pas un cours");
            return;
        }

        if(jbusy.forwarder.resizeArea)
        {
            System.out.println("resize !");
        }
        else
        {

            // Generation de l'image
            planning.cursorPoint.setLocation(SwingUtilities.convertPoint(planning,dge.getDragOrigin(), jbusy));
//            Point origin = SwingUtilities.convertPoint(jbusy, jbusy.getLocation(), planning);
//            System.out.println("x : " + (origin.x - p_abs.x)  );
//            System.out.println("y : " + (origin.y - p_abs.y) );


            
            planning.buffImage = new BufferedImage(jbusy.getWidth(), jbusy.getHeight(), java.awt.image.BufferedImage.TYPE_INT_ARGB_PRE);// buffered
            // image reference passing the comp's ht and width
            Graphics2D graphics = planning.buffImage.createGraphics();// creating
            // the graphics for buffered image
            graphics.setComposite(AlphaComposite.getInstance(
                    AlphaComposite.SRC_OVER, 0.5f)); // Sets the
            // Composite for the Graphics2D context
            boolean opacity = jbusy.isOpaque();
            if (opacity)
                jbusy.setOpaque(false);
            jbusy.paint(graphics);
            if (opacity)
                jbusy.setOpaque(true);
            
            graphics.dispose();
    
            dragSource.startDrag(dge, DragSource.DefaultMoveDrop,planning.buffImage, planning.cursorPoint, new TransferableLessonBloc( jbusy.getBusy()), tdsl);
            planning.revalidate();
            planning.repaint();
        }
    }
}
