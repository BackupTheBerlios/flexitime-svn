package fr.umlv.ir3.flexitime.richClient.gui.panel.exploitation.menu;

import java.awt.datatransfer.DataFlavor;
import java.awt.datatransfer.Transferable;
import java.awt.datatransfer.UnsupportedFlavorException;
import java.util.Arrays;

import fr.umlv.ir3.flexitime.common.data.resources.IResource;

/**
 * Creates a Transferable object for a Ressource
 * 
 * @author FlexiTeam - binou
 */
public class TransferableRessource implements Transferable {
	/**
	 * Comment for <code>IRESSOURCE_FLAVOR</code>
	 */
	public static final DataFlavor IRESSOURCE_FLAVOR = new DataFlavor(IResource.class, "IRessource"); //$NON-NLS-1$

	private DataFlavor[] flavors = { IRESSOURCE_FLAVOR };
    
    private IResource ressource;
	
	/**
	* Constructs a transferrable component object for the specified component.
	 * @param _ressource 
	*/
	public TransferableRessource(IResource _ressource) {
        this.ressource = _ressource;
	}  
	/** 
	 * @param flavor
	 * @return object
	 * @throws UnsupportedFlavorException 
	 * 
	 * @see java.awt.datatransfer.Transferable#getTransferData(java.awt.datatransfer.DataFlavor)
	 * @author   FlexiTeam - binou
	 */
	public synchronized Object getTransferData(DataFlavor flavor) throws UnsupportedFlavorException {
		if (flavor != IRESSOURCE_FLAVOR) {
			throw new UnsupportedFlavorException(flavor);	
		}			
        return ressource;
	}

	/** 
	 * @return dataFlavor
	 * 
	 * @see java.awt.datatransfer.Transferable#getTransferDataFlavors()
	 * @author   FlexiTeam - binou
	 */
	public DataFlavor[] getTransferDataFlavors() {
		return flavors;
	}

	/** 
	 * @param flavor
	 * @return boolean
	 * 
	 * @see java.awt.datatransfer.Transferable#isDataFlavorSupported(java.awt.datatransfer.DataFlavor)
	 * @author   FlexiTeam - binou
	 */
	public boolean isDataFlavorSupported(DataFlavor flavor) {
		return Arrays.asList(flavors).contains(flavor);
	}
}
