<?xml version="1.0"?>

<project default="release" basedir="." name="flexitime">

	<!-- INITIALISATION -->
	<target name="init">
		<property name="name" value="FlexiTime" />
		<property name="build.compiler" value="modern" />
		<property name="debug" value="on" />
		<property name="optimize" value="on" />
		<property name="deprecation" value="off" />
		<property name="src.dir" value="${basedir}/src" />
		<property name="src.tests.dir" value="${basedir}/test" />
		<property name="libs.dir" value="${basedir}/lib" />
		<property name="build.dir" value="${basedir}/build" />
		<property name="build.dest" value="${build.dir}/classes" />
		<property name="build.tests.dest" value="${build.dir}/classes-test" />

		<property name="packages-common" value="fr.umlv.ir3.flexitime.common.*" />
		<property name="packages-client" value="fr.umlv.ir3.flexitime.richClient.*" />
		<property name="packages-server" value="fr.umlv.ir3.flexitime.server.*" />

		<property name="build.tests.dest" value="${build.dir}/classes-test" />
		<property name="build.tests.results" value="${basedir}/test-results" />

		<path id="build.classpath">
			<fileset dir="${libs.dir}">
				<include name="**/*.jar" />
			</fileset>
			<fileset dir="${libs.dir}/hibernate">
				<include name="**/*.jar" />
			</fileset>
		</path>
	</target>

	<!-- CLEAN -->
	<target name="clean" depends="init" description="Cleans out old directories">
		<delete dir="${build.dir}" />
		<delete dir="${build.dest}" />
		<delete dir="${build.tests.dest}" />
		<delete dir="${build.tests.results}" />
		<delete>
			<fileset dir="." includes="**/*~" defaultexcludes="no" />
		</delete>
	</target>

	<!-- PREPARATION -->
	<target name="prepare" depends="init" description="Creates directories and copies resources">
		<mkdir dir="${build.dir}" />
		<mkdir dir="${build.dest}" />
		<mkdir dir="${build.tests.dest}" />

		<copy todir="${build.dest}" file="data.hbm.xml" />
		<copy todir="${build.dest}" file="hibernate.cfg.xml" />
		<copy todir="${build.dest}" file="str_fr.properties" />

		<unjar dest="${build.dest}">
			<fileset dir="${libs.dir}">
				<include name="**/*.jar" />
			</fileset>
		</unjar>

		<copy todir="${build.dest}">
			<fileset dir="${libs.dir}">
				<include name="**/*.license*" />
			</fileset>
		</copy>
	</target>

	<!-- COMPILATION -->
	<target name="compile" depends="prepare" description="Compiles the source code">
		<javac srcdir="${src.dir}" source="1.5" destdir="${build.dest}" debug="${debug}" deprecation="${deprecation}" optimize="${optimize}" includeAntRuntime="false">
			<classpath refid="build.classpath" />
		</javac>
		<javac srcdir="${src.tests.dir}" source="1.5" destdir="${build.dest}" debug="${debug}" deprecation="${deprecation}" optimize="${optimize}" includeAntRuntime="false">
			<classpath refid="build.classpath" />
		</javac>
	</target>

	<!-- JARS & WAR -->
	<target name="jar-server">
		<jar jarfile="${build.dir}/${build.name}-server.jar" compress="true" basedir="${build.dest}" includes="fr/umlv/ir3/flexitime/**" excludes="fr/umlv/ir3/flexitime/richClient/**">
			<manifest>
				<attribute name="Main-Class" value="fr.umlv.ir3.server.Server" />
				<attribute name="Class-Path" refid="build.classpath" />
			</manifest>
		</jar>
	</target>

	<target name="jar-client">
		<jar jarfile="${build.dir}/${build.name}-client.jar" compress="true" basedir="${build.dest}" includes="fr/umlv/ir3/flexitime/**" excludes="fr/umlv/ir3/flexitime/server/**">
			<manifest>
				<attribute name="Main-Class" value="fr.umlv.ir3.richClient.gui.Client" />
				<attribute name="Class-Path" refid="build.classpath" />
			</manifest>
		</jar>
	</target>

	<target name="jar-src">
		<jar jarfile="${build.dir}/${build.name}-src.jar" compress="true" basedir="${build.dest}" includes="fr/umlv/ir3/flexitime/**" excludes="**/.svn" />
	</target>

	<target name="war">

	</target>

	<target name="release" depends="war, jar-client, jar-server">

	</target>

	<!-- Tests -->
	<target name="run-tests">
		<mkdir dir="${build.tests.results}" />
		<junit printsummary="yes" fork="yes" haltonfailure="no">
			<classpath refid="tests.runtime.classpath" />
			<formatter type="plain" />
			<test todir="${build.tests.results}">
				<fileset dir="${build.tests.dest}">
					<include name="**/Test*" />
				</fileset>
			</test>
		</junit>
	</target>
</project>