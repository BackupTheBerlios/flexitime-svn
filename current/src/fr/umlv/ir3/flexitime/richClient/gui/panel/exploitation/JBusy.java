/*
 * Created on 12 janv. 2005
 * by binou
 * Copyright: GPL - UMLV(FR) - 2004/2005
 */
package fr.umlv.ir3.flexitime.richClient.gui.panel.exploitation;

import java.awt.Color;
import java.awt.Container;
import java.awt.Dimension;
import java.awt.Font;
import java.awt.Point;
import java.awt.event.InputEvent;
import java.awt.event.KeyEvent;
import java.awt.event.KeyListener;
import java.awt.event.MouseEvent;

import javax.swing.BorderFactory;
import javax.swing.JLabel;
import javax.swing.JPanel;
import javax.swing.SwingUtilities;
import javax.swing.event.MouseInputAdapter;

import fr.umlv.ir3.flexitime.common.data.activity.ILesson;
import fr.umlv.ir3.flexitime.common.data.resources.IRoom;
import fr.umlv.ir3.flexitime.common.data.resources.ITeacher;
import fr.umlv.ir3.flexitime.common.gui.models.BusyBloc;
import fr.umlv.ir3.flexitime.common.tools.FlexiLanguage;





/**
 * A extended JLabel redefined to encapsulate and represent a Busy
 * 
 * @version Verion ou révision SVN
 * 
 * @author FlexiTeam - binou
 */
public class JBusy extends JLabel implements KeyListener
{
	/**
     * Comment for <code>serialVersionUID</code>
     */
    private static final long serialVersionUID = 3258411712125352247L;
    private static FlexiLanguage language;
    static
    {
        language = FlexiLanguage.getInstance();
    }
    
    BusyBloc busy = null;
    
    boolean isSelected = false;
    private int width;
    private int heigth;
    public MouseEventForwarder forwarder;
    
    
    
    
    //**********************
    //	Constructeurs
    //**********************
    /**
     * creates a new empty JBusy
     * @param _width 
     * @param _heigth 
     */
    public JBusy(int _width, int _heigth)
    {
        this.busy = null;
        this.width = _width;
        this.heigth = _heigth;
        
		
        
        this.setText("");
        this.setBackground(Color.WHITE);
        this.setBorder(BorderFactory.createLineBorder(Color.LIGHT_GRAY));
        this.setPreferredSize(new Dimension(width,heigth));
        this.setMaximumSize(new Dimension(width,heigth));
        this.setMinimumSize(new Dimension(width,heigth));
        
        this.init();
    }
    
    
    /**
     * Creates a new JBusy based on an BusyBloc
     * 
     * @param busyBloc
     */
    public JBusy(BusyBloc busyBloc, int _width, int _heigth)
    {
        this.busy = busyBloc;
        this.width = _width;
        this.heigth = _heigth;


        
        this.setBorder(BorderFactory.createLineBorder(Color.BLACK));
        this.setPreferredSize(new Dimension(width,
                heigth * busyBloc.getNbGap()));
        
        if(busyBloc.getBusy() instanceof ILesson)
        {
            ILesson lesson = (ILesson)(busyBloc.getBusy());
            this.setFont(new Font("Serif", Font.PLAIN, 9));
            this.setBackground(lesson.getCourse().getColor());
            this.fillComponent(lesson);
            this.setToolTipText("<html>" + lesson.getCourse().getName() + "<br>"
                    + language.formatShortTime(lesson.getGap().getStartDate()) + "/"
                    + language.formatShortTime(lesson.getGap().getEndDate())
                    + "</html>");
        }

        this.setPreferredSize(new Dimension(width,heigth*busyBloc.getNbGap()));
        this.setMaximumSize(new Dimension(width,heigth*busyBloc.getNbGap()));
        this.setMinimumSize(new Dimension(width,heigth*busyBloc.getNbGap()));
        
        this.init();
        
    }
    
    private void init()
    {
        forwarder = new MouseEventForwarder();
        addMouseListener(forwarder);
        addMouseMotionListener(forwarder);
        
        this.addKeyListener(this);
        
        this.setOpaque(true);
    }

    
    
    /** 
     * Tells if the component is selected or not
     *
     * @return true if the component is selected
     * 
     */
    public boolean isSelected()
    { return isSelected;}
    
    /** 
     * Change the style of the component it's selected or not
     *
     * @param value 
     * 
     */
    public void setSelected(boolean value)
    {
        this.isSelected=value;
        if(value)
        {
            this.setBorder(BorderFactory.createLineBorder(Color.RED));
        }
        else
        {
            if(busy == null)
                this.setBorder(BorderFactory.createLineBorder(Color.LIGHT_GRAY));
            else
                this.setBorder(BorderFactory.createLineBorder(Color.BLACK));
        }
    }
    
    /** 
     * Change the component style if there's a drag or not over it
     *
     * @param b 
     * 
     * @author   FlexiTeam - binou
     */
    public void setDragOver(boolean b)
    {
        //System.out.println("drag = " + b);
        if(b == true)
            this.setBackground(Color.GREEN);
        else
            this.setBackground(Color.WHITE);
    }
    
    
    

  
	/** 
	 * Should normally be in a model
	 *
	 * @return the lesson of the component
	 */
	public BusyBloc getBusy() {
		return busy;
	}
	
	/** 
	 * Returns the gap's size of the component 
	 *
	 * @return the gap's size of the component 
	 * 
	 */
	public int getNbGaps()
	{
		if(busy == null)
			return 1;
        
		return busy.getNbGap();
	}
    
    /** 
     * DOCME Description
     * Quel service est rendu par cette méthode
     * <code>exemple d'appel de la methode</code>
     * 
     * 
     * @see (si nécessaire)
     */
    public void refresh()
    {
        if(this.busy.getBusy() instanceof ILesson)
            fillComponent((ILesson)this.busy.getBusy());
    }
    
    /**
     * Fill the text containing in the component
     * @param lesson
     */
    private void fillComponent(ILesson lesson)
    {
        StringBuffer contenu = new StringBuffer("<html>" + lesson.getCourse().getName() + "<br>");
        if(lesson.getSetTeacher().size() != 0)
            contenu.append(  ((ITeacher)lesson.getSetTeacher().iterator().next()).getName()  + "  ");
        if(lesson.getSetRoom().size() != 0)
            contenu.append(  ((IRoom)lesson.getSetRoom().iterator().next()).getName() );
        contenu.append("</html>");
        this.setText(contenu.toString());   
    }
    
	
	
	public  class MouseEventForwarder extends MouseInputAdapter {
        
        public boolean resizeArea = false;
        public boolean resizeInProgress = false;
		/** 
		 * @see javax.swing.event.MouseInputAdapter#mousePressed(java.awt.event.MouseEvent)
		 * @author   FlexiTeam - binou
		 */
		public void mousePressed(MouseEvent e) {
	    	
	    	//forward
			Container parent = getParent();
            if(parent instanceof JPanel)
            {
                parent = ((JPanel)parent).getParent();
    			if (parent != null) {
    				Point newPoint = SwingUtilities.convertPoint(JBusy.this, e.getPoint(), parent);
    				e.translatePoint(newPoint.x-e.getX(), newPoint.y-e.getY());
    				e.setSource(parent);
                    
    				parent.dispatchEvent(e);
    			}
            }
		}

		/** 
		 * @param e 
		 * 
		 * @see javax.swing.event.MouseInputAdapter#mouseReleased(java.awt.event.MouseEvent)
		 * @author   FlexiTeam - binou
		 */
		public void mouseReleased(MouseEvent e) {
			Container parent = getParent();
            if(parent instanceof JPanel)
            {
                parent = ((JPanel)parent).getParent();
    			if (parent != null) {
    				Point newPoint = SwingUtilities.convertPoint(JBusy.this, e.getPoint(), parent);
    				e.translatePoint(newPoint.x-e.getX(), newPoint.y-e.getY());
    				e.setSource(parent);
    				parent.dispatchEvent(e);			
    			}
            }
		}


		/** 
		 * @see javax.swing.event.MouseInputAdapter#mouseDragged(java.awt.event.MouseEvent)
		 * @author   FlexiTeam - binou
		 */
		public void mouseDragged(MouseEvent e) {
                //System.out.println("drag at : " + System.currentTimeMillis());
    			Container parent = getParent();
                if(parent instanceof JPanel)
                {
                    parent = ((JPanel)parent).getParent();
                    //System.out.println(parent);
        			if (parent != null) {
        				Point newPoint = SwingUtilities.convertPoint(JBusy.this, e.getPoint(), parent);
        				e.translatePoint(newPoint.x-e.getX(), newPoint.y-e.getY());
        				e.setSource(parent);
        				parent.dispatchEvent(e);
        			}
                }
		}
		
	    /** 
	     * @see javax.swing.event.MouseInputAdapter#mouseClicked(java.awt.event.MouseEvent)
	     * @author   FlexiTeam - binou
	     */
	    public void mouseClicked(MouseEvent e)
	    {
            
            int ctrlMask = InputEvent.CTRL_DOWN_MASK;
            boolean ctrl = ((e.getModifiersEx() & ctrlMask) == ctrlMask) ?
                  true : false;

	    	setSelected(!isSelected());
            //System.out.println(JBusy.this.getParent().getParent());
            if(JBusy.this.getParent().getParent() instanceof JRessourcePlanning)
                ((JRessourcePlanning)JBusy.this.getParent().getParent()).setCurrentSelected(JBusy.this, ctrl);
            else if(JBusy.this.getParent().getParent() instanceof JRessourcePlanningHebdo)
                ((JRessourcePlanningHebdo)JBusy.this.getParent().getParent()).setCurrentSelected(JBusy.this, ctrl);
            
	    }
		
		
        public void mouseMoved(MouseEvent e)
        {
            //System.out.println("e.Y : " + e.getY());
            int dist = JBusy.this.getHeight()  -  e.getY();
            //System.out.println( dist );
            if(dist > 0 && dist < 5 && JBusy.this.busy != null)
            {
                //System.out.println("agrandissement");
                resizeArea = true;
            }
            else
            {
                resizeArea = false;
            }
        }
	}



    /** 
     * DOCME Description
     * Quel service est rendu par cette méthode
     * <code>exemple d'appel de la methode</code>
     *
     * @param e 
     * 
     * @see java.awt.event.KeyListener#keyTyped(java.awt.event.KeyEvent)
     * @author   FlexiTeam - binou
     */
    public void keyTyped(KeyEvent e)
    {
        // TODO Auto-generated method stub
        
    }


    /** 
     * DOCME Description
     * Quel service est rendu par cette méthode
     * <code>exemple d'appel de la methode</code>
     *
     * @param e 
     * 
     * @see java.awt.event.KeyListener#keyPressed(java.awt.event.KeyEvent)
     * @author   FlexiTeam - binou
     */
    public void keyPressed(KeyEvent e)
    {
        System.out.println(e.getKeyCode());
        
    }


    /** 
     * DOCME Description
     * Quel service est rendu par cette méthode
     * <code>exemple d'appel de la methode</code>
     *
     * @param e 
     * 
     * @see java.awt.event.KeyListener#keyReleased(java.awt.event.KeyEvent)
     * @author   FlexiTeam - binou
     */
    public void keyReleased(KeyEvent e)
    {
        // TODO Auto-generated method stub
        
    }






	
	
}

