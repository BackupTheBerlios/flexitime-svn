/*
 * Created on 24 janv. 2005
 * by binou
 * Copyright: GPL - UMLV(FR) - 2004/2005
 */
package fr.umlv.ir3.flexitime.richClient.gui.panel.exploitation.menu;

import java.awt.AlphaComposite;
import java.awt.Component;
import java.awt.Graphics2D;
import java.awt.Point;
import java.awt.dnd.DnDConstants;
import java.awt.dnd.DragGestureEvent;
import java.awt.dnd.DragGestureListener;
import java.awt.dnd.DragSource;
import java.awt.dnd.DragSourceDragEvent;
import java.awt.dnd.DragSourceDropEvent;
import java.awt.dnd.DragSourceEvent;
import java.awt.dnd.DragSourceListener;
import java.awt.dnd.DropTarget;
import java.awt.image.BufferedImage;

import javax.swing.JComponent;
import javax.swing.JList;
import javax.swing.SwingUtilities;

import fr.umlv.ir3.flexitime.richClient.models.exploitation.teacher.TeacherListModel;




/**
 * DOCME Description
 * explication supplémentaire si nécessaire
 * in english please...
 * Que fait cette classe, qu'est-ce qu'elle 
 * représente, ...
 * 
 * @version Verion ou révision SVN
 * @see (si nécessaire)
 * 
 * @author FlexiTeam - binou
 */
public class JTeacherList extends JList
{
    
    private DragSource dragSource;
    private DropTarget dropTarget;
    private static BufferedImage buffImage = null; //buff image
    private static Point cursorPoint = new Point();
    
    private TeacherListModel model;
    
    public JTeacherList(TeacherListModel _model)
    {
        super(_model);
        
        this.model = _model;
        dragSource = new DragSource();
        ComponentDragSourceListener tdsl = new ComponentDragSourceListener();
        dragSource.createDefaultDragGestureRecognizer(this, DnDConstants.ACTION_COPY_OR_MOVE, new ComponentDragGestureListener(tdsl));

    }
    
    
    final class ComponentDragSourceListener implements DragSourceListener {
        /** 
         * @see java.awt.dnd.DragSourceListener#dragDropEnd(java.awt.dnd.DragSourceDropEvent)
         * @author   FlexiTeam - binou
         */
        public void dragDropEnd(DragSourceDropEvent dsde) {
            dsde.getClass();
        }
        /** 
         * @see java.awt.dnd.DragSourceListener#dragEnter(java.awt.dnd.DragSourceDragEvent)
         * @author   FlexiTeam - binou
         */
        public void dragEnter(DragSourceDragEvent dsde)  {
            int action = dsde.getDropAction();
            if (action == DnDConstants.ACTION_MOVE) {
                dsde.getDragSourceContext().setCursor(DragSource.DefaultMoveDrop);
            } 
            else {
                dsde.getDragSourceContext().setCursor(DragSource.DefaultMoveNoDrop);
            }
        }
        /** 
         * @see java.awt.dnd.DragSourceListener#dragOver(java.awt.dnd.DragSourceDragEvent)
         * @author   FlexiTeam - binou
         */
        public void dragOver(DragSourceDragEvent dsde) {
            int action = dsde.getDropAction();
            if (action == DnDConstants.ACTION_MOVE) {
                dsde.getDragSourceContext().setCursor(DragSource.DefaultMoveDrop);
            } 
            else {
                dsde.getDragSourceContext().setCursor(DragSource.DefaultMoveNoDrop);
            }
        }
        /** 
         * @see java.awt.dnd.DragSourceListener#dropActionChanged(java.awt.dnd.DragSourceDragEvent)
         * @author   FlexiTeam - binou
         */
        public void dropActionChanged(DragSourceDragEvent dsde)  {
            int action = dsde.getDropAction();
            if (action == DnDConstants.ACTION_MOVE) {
                dsde.getDragSourceContext().setCursor(DragSource.DefaultMoveDrop);
            } 
            else {
                dsde.getDragSourceContext().setCursor(DragSource.DefaultMoveNoDrop);
            }
        }
        /** 
         * @see java.awt.dnd.DragSourceListener#dragExit(java.awt.dnd.DragSourceEvent)
         * @author   FlexiTeam - binou
         */
        public void dragExit(DragSourceEvent dse) {
            
           dse.getDragSourceContext().setCursor(DragSource.DefaultMoveNoDrop);
        }   
    }


    
    final class ComponentDragGestureListener implements DragGestureListener 
    {
        ComponentDragSourceListener tdsl;
        
        
        /**
         * @param tdsl
         */
        public ComponentDragGestureListener(ComponentDragSourceListener tdsl) {
            this.tdsl = tdsl;
        }
        
        /** 
         * @see java.awt.dnd.DragGestureListener#dragGestureRecognized(java.awt.dnd.DragGestureEvent)
         * @author   FlexiTeam - binou
         */
        public void dragGestureRecognized(DragGestureEvent dge) {
            
            System.out.println("dragGestureRecognized !!");
            Point p_abs = dge.getDragOrigin();
            //Point p_rel = gbl.location(p_abs.x, p_abs.y);
            
            //lit le label sur la grille d'origine
            Component comp = getComponentAt(p_abs);
            
            //on test si c bien une case de cours et si c bien un cours ... sinon pas de drag !
            if (comp != null)
            {
                //Generation de l'image
                cursorPoint.setLocation(SwingUtilities.convertPoint(JTeacherList.this, dge.getDragOrigin(), comp));
                buffImage = new BufferedImage(comp.getWidth(), comp.getHeight(), java.awt.image.BufferedImage.TYPE_INT_ARGB_PRE);//buffered image reference passing the comp's ht and width
                Graphics2D graphics = buffImage.createGraphics();//creating the graphics for buffered image
                graphics.setComposite(AlphaComposite.getInstance(AlphaComposite.SRC_OVER, 0.5f));   //Sets the Composite for the Graphics2D context
                boolean opacity = ((JComponent)comp).isOpaque();
                if (opacity) {
                    ((JComponent)comp).setOpaque(false);                
                }
                comp.paint(graphics);
                if (opacity) {
                    ((JComponent)comp).setOpaque(true);                 
                }
                graphics.dispose();

                dragSource.startDrag(dge, DragSource.DefaultMoveDrop , new TransferableCourse(null), tdsl);
                revalidate();
                repaint();
            }
            
        }
    }

}

