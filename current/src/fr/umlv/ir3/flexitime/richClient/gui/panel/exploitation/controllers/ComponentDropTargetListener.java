/*
 * Created on 26 janv. 2005
 * by binou
 * Copyright: GPL - UMLV(FR) - 2004/2005
 */
package fr.umlv.ir3.flexitime.richClient.gui.panel.exploitation.controllers;

import java.awt.Graphics2D;
import java.awt.Insets;
import java.awt.Point;
import java.awt.Rectangle;
import java.awt.datatransfer.Transferable;
import java.awt.datatransfer.UnsupportedFlavorException;
import java.awt.dnd.DnDConstants;
import java.awt.dnd.DropTargetDragEvent;
import java.awt.dnd.DropTargetDropEvent;
import java.awt.dnd.DropTargetEvent;
import java.awt.dnd.DropTargetListener;
import java.io.IOException;
import java.util.ArrayList;
import java.util.List;

import fr.umlv.ir3.flexitime.common.data.activity.IBusy;
import fr.umlv.ir3.flexitime.common.data.activity.ILesson;
import fr.umlv.ir3.flexitime.common.data.resources.IResource;
import fr.umlv.ir3.flexitime.common.gui.models.BusyBloc;
import fr.umlv.ir3.flexitime.richClient.gui.panel.exploitation.JBusy;
import fr.umlv.ir3.flexitime.richClient.gui.panel.exploitation.JRessourcePlanning;
import fr.umlv.ir3.flexitime.richClient.gui.panel.exploitation.TransferableLessonBloc;
import fr.umlv.ir3.flexitime.richClient.gui.panel.exploitation.menu.TransferableCourse;
import fr.umlv.ir3.flexitime.richClient.gui.panel.exploitation.menu.TransferableRessource;
import fr.umlv.ir3.flexitime.richClient.models.exploitation.course.CourseAdapter;


/**
 * Implements the drop for a JRessourcePlanning
 * 
 * @version Verion ou révision SVN
 * 
 * @author FlexiTeam - binou
 */
public class ComponentDropTargetListener implements DropTargetListener
{
    private JRessourcePlanning planning;

    Insets              insets;
    private Rectangle   rect2D    = new Rectangle();
    // garde en mémoire le drag point potentiel actuel ainsi ke la longueur
    // de l'ajout potentiel
    private Point       dragPoint = new Point();
    private JBusy       dragComp;
    private List<JBusy> lstDragComp;
    private int         length;

    /**
     * DOCME
     * @param planning
     */
    public ComponentDropTargetListener(JRessourcePlanning _planning)
    {
        this.planning = _planning;
        this.lstDragComp = new ArrayList<JBusy>(4);
    }

    /**
     * @see java.awt.dnd.DropTargetListener#dragEnter(java.awt.dnd.DropTargetDragEvent)
     * @author FlexiTeam - binou
     */
    public void dragEnter(DropTargetDragEvent dtde)
    {
        dtde.getClass();
        dragComp = null;
    }

    /**
     * @see java.awt.dnd.DropTargetListener#dragExit(java.awt.dnd.DropTargetEvent)
     * @author FlexiTeam - binou
     */
    public void dragExit(DropTargetEvent dte)
    {
        dte.getClass();

        // redessine la partie du buffImage pour qu'il disparaisse vu kon
        // sort d'une zone de drop
        planning.paintImmediately(rect2D.getBounds());

        for(JBusy temp : lstDragComp)
            temp.setDragOver(false);
        lstDragComp.clear();
        dragComp = null;
    }

    /**
     * @see java.awt.dnd.DropTargetListener#dragOver(java.awt.dnd.DropTargetDragEvent)
     * @author FlexiTeam - binou
     */
    public void dragOver(DropTargetDragEvent dtde)
    {
        //System.out.println("dragOver");
        Point p_abs = dtde.getLocation();
        
        //on lit le transferable en cours de drag et on va tester son flavor
        Transferable transferable = dtde.getTransferable();
        JBusy jbusy = planning.getBusyAt(p_abs);
        if(jbusy == null)
        {
            //System.out.println("Drag rejeté : ce n'est pas un créneau dropable (exterieur)");
            dtde.rejectDrag();
            planning.paintImmediately(rect2D.getBounds());
            if(lstDragComp.size() != 0)
            {
                for(JBusy temp : lstDragComp)
                    temp.setDragOver(false);
                lstDragComp.clear();
                dragComp = null;
            }
            return;
        }

        //Cas d'un copier coller d'un autre cours
        if(transferable.isDataFlavorSupported(TransferableLessonBloc.BUSYBLOC_FLAVOR))
        {
            //System.out.println("dragOver() d'une BusyBloc at " + System.currentTimeMillis()); //$NON-NLS-1$

            planning.paintImmediately(rect2D.getBounds());
            rect2D.setRect((int) ( p_abs.getX() - planning.cursorPoint.getX() ),
                    (int) ( p_abs.getY() - planning.cursorPoint.getY() ),
                    planning.buffImage.getWidth(), planning.buffImage.getHeight());

            ( (Graphics2D) planning.getGraphics() ).drawImage(planning.buffImage,
                    (int) ( p_abs.getX() - planning.cursorPoint.getX() ),
                    (int) ( p_abs.getY() - planning.cursorPoint.getY() ),
                    planning);
            
                dtde.acceptDrag(dtde.getDropAction());

                try
                {
                    //Lecture du lesson bloc à dragguer
                    BusyBloc busy = (BusyBloc) transferable.getTransferData(TransferableLessonBloc.BUSYBLOC_FLAVOR);
                    changeDragOverStyle(jbusy, p_abs, busy.getNbGap(), dtde);
                }
                catch (UnsupportedFlavorException e)
                {
                    e.printStackTrace();
                }
                catch (IOException e)
                {
                    e.printStackTrace();
                }

        }//Cas d'un drag d'un Cours
        else if (transferable.isDataFlavorSupported(TransferableCourse.COURSEADAPTER_FLAVOR))
        {
            //System.out.println("dragOver() d'une Course at " + System.currentTimeMillis()); //$NON-NLS-1$
            dtde.acceptDrag(dtde.getDropAction());

            try
            {
                //Lecture du lesson bloc à dragguer
                CourseAdapter courseAdapter = (CourseAdapter) transferable.getTransferData(TransferableCourse.COURSEADAPTER_FLAVOR);
                changeDragOverStyle(jbusy, p_abs, courseAdapter.getCourse().getDefaultLength()/planning.getModel().getGapTime(), dtde);
            }
            catch (UnsupportedFlavorException e)
            {
                e.printStackTrace();
            }
            catch (IOException e)
            {
                e.printStackTrace();
            }
        }//Cas d'un drag d'une ressoruce
        else if (transferable.isDataFlavorSupported(TransferableRessource.IRESSOURCE_FLAVOR))
        {
            // on desactive le drop si on est pas sur une case libre sans cours de prévu
            if(jbusy.getBusy() == null)
            {
                dtde.rejectDrag();
            }
            else
            {
                //System.out.println("dragOver() d'une Ressource at " + System.currentTimeMillis()); //$NON-NLS-1$
                dtde.acceptDrag(dtde.getDropAction());
            }
        }
        else
            System.out.println("Mauvais Flavor");
    }

    /** 
     * DOCME Description
     * Quel service est rendu par cette méthode
     * <code>exemple d'appel de la methode</code>
     * @param dtde 
     *
     * @param length2 
     * 
     * @see (si nécessaire)
     */
    private void changeDragOverStyle(JBusy jbusy, Point p_abs, int nbGap, DropTargetDragEvent dtde)
    {
        // on desactive le drop si on est pas sur une case libre sans cours de prévu
        if(jbusy.getBusy() != null)
        {
            //System.out.println("Drag rejeté : ce n'est pas un créneau dropable (cours)");
            dtde.rejectDrag();
            planning.paintImmediately(rect2D.getBounds());
            
            //on déselectionne les dragOver précédent
            if(lstDragComp.size() != 0)
            {
                for(JBusy temp : lstDragComp)
                    temp.setDragOver(false);
                lstDragComp.clear();
                dragComp = null;
            }
            return;
        }
        
        // on test kon a bien changer de sélection
        if(dragComp != jbusy)
        {
            // On déselectionne le dragOverStyle précédent
            if( dragComp != null )
            {
                for(JBusy temp : lstDragComp)
                    temp.setDragOver(false);
                lstDragComp.clear();
            }

            // on mémorise pour la suite le composant "draggué"
            // potentiel et sa longueur
            dragComp = jbusy;

            // on regarde combien de créneau nous est disponible
            int nbEmptyGap = planning.getModel().getNbEmptyGapAt(
                    planning.locateWeek(p_abs), planning.locateDay(p_abs),
                    planning.locateGap(p_abs) );
            
            //System.out.println(nbEmptyGap + " cases dispo.");
            
            if (nbEmptyGap <= 0)
                System.out.println("Oula gros pb :s");

            if (nbGap > nbEmptyGap)
                length = nbEmptyGap;
            else
                length = nbGap;

            // on sélectionne la zone du drag potentiel
            JBusy temp;
            for (int i = 0 ; i < length ; i++)
            {
                temp = planning.getBusyAt(p_abs.x, p_abs.y +i*JRessourcePlanning.GAP_HEIGTH    );
                temp.setDragOver(true);
                lstDragComp.add(temp);
            }
        }
    }

    /**
     * @see java.awt.dnd.DropTargetListener#dropActionChanged(java.awt.dnd.DropTargetDragEvent)
     * @author FlexiTeam - binou
     */
    public void dropActionChanged(DropTargetDragEvent dtde)
    {
        dtde.getClass();
         /*Point pt = dtde.getLocation();
         paintImmediately(rect2D.getBounds()); rect2D.setRect((int)
         (pt.getX()-cursorPoint.getX()),(int)
         (pt.getY()-cursorPoint.getY()),buffImage.getWidth(),buffImage.getHeight());
         ((Graphics2D) getGraphics()).drawImage(buffImage,(int)
         (pt.getX()-cursorPoint.getX()),(int)
         (pt.getY()-cursorPoint.getY()),FlexiEDT.this);*/
         dtde.acceptDrag(dtde.getDropAction());
         
    }

    /** 
     * @see java.awt.dnd.DropTargetListener#drop(java.awt.dnd.DropTargetDropEvent)
     * @author   FlexiTeam - binou
     */
    public void drop(DropTargetDropEvent dtde)
    {
        //System.out.println("drop");
        Point location = dtde.getLocation();
        // Point target = planning.getLayout().location(location.x, location.y);
        try
        {
            planning.paintImmediately(rect2D.getBounds());
            // int action = dtde.getDropAction();
            JBusy jbusy = planning.getBusyAt(location);
            if (jbusy == null)
            {
                System.out.println("drop rejeté : ce n'est pas un créneaudropable");
                rejectDrop(dtde);
                return;
            }


            Transferable transferable = dtde.getTransferable();
            if (transferable
                    .isDataFlavorSupported(TransferableLessonBloc.BUSYBLOC_FLAVOR))
            {
                System.out.println("DataFlavor OK : BUSYBLOC_FLAVOR"); //$NON-NLS-1$
                
                if (jbusy.getBusy() != null)
                {
                    System.out.println("drop rejeté : ce n'est pas un créneaudropable (cours)");
                    rejectDrop(dtde);
                    return;
                }
                
                // On recupere le lesson a droper
                BusyBloc busyBloc = (BusyBloc) transferable
                        .getTransferData(TransferableLessonBloc.BUSYBLOC_FLAVOR);

                if (busyBloc == null)
                {
                    System.err.println("rien a dropper !!!"); //$NON-NLS-1$
                    rejectDrop(dtde);
                }
                else
                {
                    planning.getModel().addLesson(
                            planning.locateWeek(location),
                            planning.locateDay(location),
                            planning.locateGap(location), length, busyBloc);

                    dtde.dropComplete(true);
                    planning.revalidate();
                    planning.repaint();
                    // return;
                }

                if (dtde.getDropAction() == DnDConstants.ACTION_MOVE)
                    ;// System.out.println("move");
                else
                    ;// System.out.println("copy");
            }
            else if (transferable
                    .isDataFlavorSupported(TransferableCourse.COURSEADAPTER_FLAVOR))
            {
                System.out.println("DataFlavor OK : ICOURSE_FLAVOR"); //$NON-NLS-1$
                
                if (jbusy.getBusy() != null)
                {
                    System.out.println("drop rejeté : ce n'est pas un créneaudropable (cours)");
                    rejectDrop(dtde);
                    return;
                }
                
                // On recupere le lesson a droper
                CourseAdapter courseAdapter = (CourseAdapter) transferable.getTransferData(TransferableCourse.COURSEADAPTER_FLAVOR);

                if (courseAdapter == null)
                {
                    System.err.println("rien a dropper !!!"); //$NON-NLS-1$
                    rejectDrop(dtde);
                }
                else
                {
                    planning.getModel().addLesson(
                            planning.locateWeek(location),
                            planning.locateDay(location),
                            planning.locateGap(location), 
                            length,
                            courseAdapter.getCourse(), 
                            courseAdapter.getTeacher());

                    dtde.dropComplete(true);
                    planning.revalidate();
                    planning.repaint();
                    // return;
                }
            }// Cas d'un drag d'une ressoruce
            else if (transferable
                    .isDataFlavorSupported(TransferableRessource.IRESSOURCE_FLAVOR))
            {
                System.out.println("DataFlavor OK : IRESSOURCE_FLAVOR"); //$NON-NLS-1$
                
                if (jbusy.getBusy() == null)
                {
                    System.out.println("drop rejeté : ce n'est pas un créneau dropable (créneau vide)");
                    rejectDrop(dtde);
                    return;
                }
                
                IResource ressource = (IResource) transferable
                        .getTransferData(TransferableRessource.IRESSOURCE_FLAVOR);

                if (jbusy == null) return;
                if (jbusy.getBusy() == null) return;
                IBusy busy = jbusy.getBusy().getBusy();
                if (busy instanceof ILesson)
                {
                    ( (ILesson) busy ).addResource(ressource);

                    planning.getModel().updateLesson(
                            planning.locateWeek(location),
                            planning.locateDay(location),
                            planning.locateGap(location));

                    dtde.dropComplete(true);
                    planning.revalidate();
                    planning.repaint();
                }
            }
            else
            {
                System.out
                        .println("Houston on a un probleme ! Mauvais flavor ... "); //$NON-NLS-1$
            }
        }
        catch (UnsupportedFlavorException e)
        {
            rejectDrop(dtde);
            e.printStackTrace();
        }
        catch (IOException e)
        {
            rejectDrop(dtde);
            e.printStackTrace();
        }

    }
    
    private void rejectDrop(DropTargetDropEvent dtde)
    {
        dtde.rejectDrop();
        dtde.dropComplete(false);
        //planning.revalidate();
        //planning.repaint();
    }
    
}

