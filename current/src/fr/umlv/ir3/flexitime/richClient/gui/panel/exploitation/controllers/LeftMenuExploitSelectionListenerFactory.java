package fr.umlv.ir3.flexitime.richClient.gui.panel.exploitation.controllers;

/*
 * Created on 23 janv. 2005
 *
 * TODO To change the template for this generated file go to
 * Window - Preferences - Java - Code Style - Code Templates
 */


import javax.swing.JList;
import javax.swing.JTree;
import javax.swing.event.ListSelectionEvent;
import javax.swing.event.ListSelectionListener;
import javax.swing.event.TreeSelectionEvent;
import javax.swing.event.TreeSelectionListener;
import javax.swing.tree.TreeNode;

import fr.umlv.ir3.flexitime.common.data.resources.IResource;
import fr.umlv.ir3.flexitime.common.tools.FlexiLanguage;
import fr.umlv.ir3.flexitime.richClient.gui.panel.exploitation.RessourcePlanning;
import fr.umlv.ir3.flexitime.richClient.models.management.device.DeviceTreeNode;
import fr.umlv.ir3.flexitime.richClient.models.management.device.TypeDeviceTreeNode;
import fr.umlv.ir3.flexitime.richClient.models.management.room.RoomTreeNode;
import fr.umlv.ir3.flexitime.richClient.models.management.room.TypeRoomTreeNode;
import fr.umlv.ir3.flexitime.richClient.models.management.teacher.TeacherListModel;
import fr.umlv.ir3.flexitime.richClient.models.management.track.GroupTreeNode;



/**
 * Factory that creates listener for the left menu
 * 
 * @author FlexiTeam - binou
 *
 * TODO To change the template for this generated type comment go to
 * Window - Preferences - Java - Code Style - Code Templates
 */
public class LeftMenuExploitSelectionListenerFactory 
{
    private static FlexiLanguage language = FlexiLanguage.getInstance();


    /**
     * Creates a TreeSelectionListener for a tree of Track
     * @param panelParent
     * @return
     */
    public static TreeSelectionListener createTrackTreeSelectionListener(final RessourcePlanning ressourcePlanning)
    {
        TreeSelectionListener selectionListener = new TreeSelectionListener()
        {
            public void valueChanged(TreeSelectionEvent arg0) 
            {

                    JTree tmpTree = (JTree)arg0.getSource();
                    if(tmpTree.getSelectionPath()!= null)
                    {
                        TreeNode tmpTreeNode = (TreeNode)tmpTree.getSelectionPath().getLastPathComponent();
                        if(tmpTreeNode instanceof GroupTreeNode)
                        {
                            ressourcePlanning.setRessource(( (GroupTreeNode) tmpTreeNode ).getGroup());
                            //panelParent.remove(0);
                            //((JSplitPane)panelParent).setRightComponent(panel1);
                            //panelParent.add(panel1, BorderLayout.CENTER,0);
                            //panelParent.validate() ;
                            //panelParent.repaint();
                        }
                    }

                }
                
            };
            return selectionListener;
    }
        
    /**
     * Creates a TreeSelectionListener for a tree of Device
     * @param panelParent
     * @return
     */
    public static TreeSelectionListener createDeviceTreeSelectionListener(final RessourcePlanning ressourcePlanning)
    {
        TreeSelectionListener selectionListener = new TreeSelectionListener()
        {
            public void valueChanged(TreeSelectionEvent arg0) 
            {

                    JTree tmpTree = (JTree)arg0.getSource();
                    if(tmpTree.getSelectionPath()!= null)
                    {
                        TreeNode tmpTreeNode = (TreeNode)tmpTree.getSelectionPath().getLastPathComponent();
                        if(tmpTreeNode instanceof TypeDeviceTreeNode)
                        {
                            System.out.println("TODO générer une List de ce type de device");
                        }
                        else if(tmpTreeNode instanceof DeviceTreeNode)
                        {
                            ressourcePlanning.setRessource(( (DeviceTreeNode) tmpTreeNode ).getDevice());
                            //panelParent.remove(0);
                            //((JSplitPane)panelParent).setRightComponent(panel1);
                            //panelParent.add(panel1, BorderLayout.CENTER,0);
                            //panelParent.validate() ;
                            //panelParent.repaint();
                        }
                    }

                }
                
            };
            return selectionListener;
    }

    
    /**
     * Creates a TreeSelectionListener for a tree of Room
     * @param panelParent
     * @return
     */
    public static TreeSelectionListener createRoomTreeSelectionListener(final RessourcePlanning ressourcePlanning)
    {
        TreeSelectionListener selectionListener = new TreeSelectionListener()
        {
            public void valueChanged(TreeSelectionEvent arg0) 
            {
                    JTree tmpTree = (JTree)arg0.getSource();
                    if(tmpTree.getSelectionPath()!= null)
                    {
                        TreeNode tmpTreeNode = (TreeNode)tmpTree.getSelectionPath().getLastPathComponent();
                        if(tmpTreeNode instanceof TypeRoomTreeNode)
                        {
                            System.out.println("TODO générer une List de ce type de room");
                        }
                        else if(tmpTreeNode instanceof RoomTreeNode)
                        {
                            ressourcePlanning.setRessource(( (RoomTreeNode) tmpTreeNode ).getRoom());
                            //panelParent.remove(0);
                            //((JSplitPane)panelParent).setRightComponent(panel1);
                            //panelParent.add(panel1, BorderLayout.CENTER,0);
                            //panelParent.validate() ;
                            //panelParent.repaint();
                        }
                    }

                }
                
            };
            return selectionListener;
    }
      
    /**
     * Creates a List SelectionListener for a list of Teacher
     * @param panelParent
     * @return
     */
    public static ListSelectionListener createTeacherListSelectionListener(final RessourcePlanning ressourcePlanning)  
    {
        ListSelectionListener selectionListener = new ListSelectionListener()
        {
            public void valueChanged(ListSelectionEvent arg0) 
            {
                    JList list  = (JList)arg0.getSource();  
                    IResource ressource = (IResource) ((TeacherListModel)list.getModel()).getPartyAt(list.getSelectedIndex());
                    ressourcePlanning.setRessource(ressource);
                    //panelParent.remove(0);
                    //panelParent.add(panel1, BorderLayout.CENTER,0);
                    //((JSplitPane)panelParent).setRightComponent(panel1);
                    //panelParent.validate() ;
                    //panelParent.repaint();
            }   
        };
        return selectionListener;
    }
}