/*
 * Created on 26 janv. 2005
 * by binou
 * Copyright: GPL - UMLV(FR) - 2004/2005
 */
package fr.umlv.ir3.flexitime.richClient.gui.panel.exploitation.controllers;

import java.awt.Component;
import java.awt.Graphics2D;
import java.awt.GridBagConstraints;
import java.awt.GridBagLayout;
import java.awt.Insets;
import java.awt.Point;
import java.awt.Rectangle;
import java.awt.datatransfer.Transferable;
import java.awt.datatransfer.UnsupportedFlavorException;
import java.awt.dnd.DropTargetDragEvent;
import java.awt.dnd.DropTargetDropEvent;
import java.awt.dnd.DropTargetEvent;
import java.awt.dnd.DropTargetListener;
import java.io.IOException;

import fr.umlv.ir3.flexitime.common.data.activity.IBusy;
import fr.umlv.ir3.flexitime.common.data.activity.ILesson;
import fr.umlv.ir3.flexitime.common.data.resources.IResource;
import fr.umlv.ir3.flexitime.common.gui.models.BusyBloc;
import fr.umlv.ir3.flexitime.richClient.gui.panel.exploitation.JBusy;
import fr.umlv.ir3.flexitime.richClient.gui.panel.exploitation.JRessourcePlanning;
import fr.umlv.ir3.flexitime.richClient.gui.panel.exploitation.TransferableLessonBloc;
import fr.umlv.ir3.flexitime.richClient.gui.panel.exploitation.menu.TransferableCourse;
import fr.umlv.ir3.flexitime.richClient.gui.panel.exploitation.menu.TransferableRessource;


/**
 * DOCME Description
 * explication supplémentaire si nécessaire
 * in english please...
 * Que fait cette classe, qu'est-ce qu'elle 
 * représente, ...
 * 
 * @version Verion ou révision SVN
 * @see (si nécessaire)
 * 
 * @author FlexiTeam - binou
 */
public class ComponentDropTargetListener implements DropTargetListener
{
    private JRessourcePlanning planning;

    Insets            insets;
    private Rectangle rect2D    = new Rectangle();
    // garde en mémoire le drag point potentiel actuel ainsi ke la longueur
    // de l'ajout potentiel
    private Point     dragPoint = new Point();
    private int       length;

    /**
     * DOCME
     * @param planning
     */
    public ComponentDropTargetListener(JRessourcePlanning _planning)
    {
        this.planning = _planning;
    }

    /**
     * @see java.awt.dnd.DropTargetListener#dragEnter(java.awt.dnd.DropTargetDragEvent)
     * @author FlexiTeam - binou
     */
    public void dragEnter(DropTargetDragEvent dtde)
    {
        dtde.getClass();
        dragPoint.setLocation(-1, -1);
        
//        Point p_rel = dtde.getLocation();
//        
//        //on devrait désactiver le drop mais ca marche pas la :(
//        if(!isALessonGap(p_rel))
//        {
//            dtde.rejectDrag();
//            paintImmediately(rect2D.getBounds());
//            return;
//        }

        // System.out.println("dragEnter() at " +
        // System.currentTimeMillis());
        /*
         * Point pt = dtde.getLocation();
         * paintImmediately(rect2D.getBounds()); rect2D.setRect((int)
         * (pt.getX()-cursorPoint.getX()),(int)
         * (pt.getY()-cursorPoint.getY()),buffImage.getWidth(),buffImage.getHeight());
         * ((Graphics2D) getGraphics()).drawImage(buffImage,(int)
         * (pt.getX()-cursorPoint.getX()),(int)
         * (pt.getY()-cursorPoint.getY()),FlexiEDT.this);
         * dtde.acceptDrag(dtde.getDropAction());
         */

    }

    /**
     * @see java.awt.dnd.DropTargetListener#dragExit(java.awt.dnd.DropTargetEvent)
     * @author FlexiTeam - binou
     */
    public void dragExit(DropTargetEvent dte)
    {
        dte.getClass();

        // redessine la partie du buffImage pour qu'il disparaisse vu kon
        // sort d'une zone de drop
        planning.paintImmediately(rect2D.getBounds());
        for (int i = dragPoint.y ; i < dragPoint.y + length ; i++)
            planning.setDragOverStyle(dragPoint.x, i, false);
        dragPoint.setLocation(-1, -1);
    }

    /**
     * @see java.awt.dnd.DropTargetListener#dragOver(java.awt.dnd.DropTargetDragEvent)
     * @author FlexiTeam - binou
     */
    public void dragOver(DropTargetDragEvent dtde)
    {
        
        Point p_abs = dtde.getLocation();
        Point p_rel = planning.getLayout().location(p_abs.x, p_abs.y);

        //si on est pas dans le cas d'une case de cours ... on désactive le drag. On aplus rien a faire dans cette méthode
        if(!planning.isALessonGap(p_rel))
        {
            dtde.rejectDrag();
            planning.paintImmediately(rect2D.getBounds());
            return;
        }
        
        //on lit le transferable en cours de drag et on va tester son flavor
        Transferable transferable = dtde.getTransferable();
        
        //Cas d'un copier coller d'un autre cours
        if(transferable.isDataFlavorSupported(TransferableLessonBloc.BUSYBLOC_FLAVOR))
        {
            //System.out.println("dragOver() d'une BusyBloc at " + System.currentTimeMillis()); //$NON-NLS-1$
            // on desactive le drop si on est pas sur une case de cours ou
            // si on est sur un cours
            if (planning.getModel().isALesson(planning.xToWeek(p_rel.x), planning.yToDay(p_rel.y),
                    planning.yToGapInTheDay(p_rel.y)))
            {
                dtde.rejectDrag();
                planning.paintImmediately(rect2D.getBounds());
            }
            else
            {
                planning.paintImmediately(rect2D.getBounds());
                rect2D.setRect((int) ( p_abs.getX() - planning.cursorPoint.getX() ),
                        (int) ( p_abs.getY() - planning.cursorPoint.getY() ),
                        planning.buffImage.getWidth(), planning.buffImage.getHeight());

                ( (Graphics2D) planning.getGraphics() ).drawImage(planning.buffImage,
                        (int) ( p_abs.getX() - planning.cursorPoint.getX() ),
                        (int) ( p_abs.getY() - planning.cursorPoint.getY() ),
                        planning);
                dtde.acceptDrag(dtde.getDropAction());

                try
                {
                    // on test kon a bien changer de sélection
                    if (dragPoint.x != p_rel.x || dragPoint.y != p_rel.y)
                    {
                        // Lecture du lesson bloc à dragguer
                        BusyBloc busy = (BusyBloc) transferable
                                .getTransferData(TransferableLessonBloc.BUSYBLOC_FLAVOR);

                        // On déselectionne le dragOverStyle précédent
                        if (dragPoint.x != -1 && dragPoint.y != -1)
                        {
                            for (int i = dragPoint.y ; i < dragPoint.y
                                    + length ; i++)
                                planning.setDragOverStyle(dragPoint.x, i, false);
                        }

                        // on mémorise pour la suite le nous point de drag
                        // potentiel et sa longueur
                        dragPoint.setLocation(p_rel.x, p_rel.y);

                        // on regarde combien de créneau nous est disponible
                        int nbEmptyGap = planning.getModel().getNbEmptyGapAt(
                                planning.xToWeek(p_rel.x), planning.yToDay(p_rel.y),
                                planning.yToGapInTheDay(p_rel.y));
                        if (nbEmptyGap <= 0)
                            System.out.println("Oula gros pb :s"); //$NON-NLS-1$

                        if (busy.getNbGap() > nbEmptyGap)
                            length = nbEmptyGap;
                        else
                            length = busy.getNbGap();

                        // on sélectionne la zone du drag potentiel
                        for (int i = p_rel.y ; i < p_rel.y + length ; i++)
                            planning.setDragOverStyle(p_rel.x, i, true);

                    }
                }
                catch (UnsupportedFlavorException e)
                {
                    e.printStackTrace();
                }
                catch (IOException e)
                {
                    e.printStackTrace();
                }
            }
        }//Cas d'un drag d'un Cours
        else if (transferable.isDataFlavorSupported(TransferableCourse.ICOURSE_FLAVOR))
        {
            //System.out.println("dragOver() d'une Course at " + System.currentTimeMillis()); //$NON-NLS-1$
            ;
        }//Cas d'un drag d'une ressoruce
        else if (transferable.isDataFlavorSupported(TransferableRessource.IRESSOURCE_FLAVOR))
        {
            if (!planning.getModel().isALesson(planning.xToWeek(p_rel.x), planning.yToDay(p_rel.y),planning.yToGapInTheDay(p_rel.y)))
            {
                dtde.rejectDrag();
            }
            else
            {
                //System.out.println("dragOver() d'une Ressource at " + System.currentTimeMillis()); //$NON-NLS-1$
                dtde.acceptDrag(dtde.getDropAction());
            }

        }
    }

    /**
     * @see java.awt.dnd.DropTargetListener#dropActionChanged(java.awt.dnd.DropTargetDragEvent)
     * @author FlexiTeam - binou
     */
    public void dropActionChanged(DropTargetDragEvent dtde)
    {
        dtde.getClass();
        /*
         * Point pt = dtde.getLocation();
         * paintImmediately(rect2D.getBounds()); rect2D.setRect((int)
         * (pt.getX()-cursorPoint.getX()),(int)
         * (pt.getY()-cursorPoint.getY()),buffImage.getWidth(),buffImage.getHeight());
         * ((Graphics2D) getGraphics()).drawImage(buffImage,(int)
         * (pt.getX()-cursorPoint.getX()),(int)
         * (pt.getY()-cursorPoint.getY()),FlexiEDT.this);
         * dtde.acceptDrag(dtde.getDropAction());
         */
    }

    /** 
     * @see java.awt.dnd.DropTargetListener#drop(java.awt.dnd.DropTargetDropEvent)
     * @author   FlexiTeam - binou
     */
    public void drop(DropTargetDropEvent dtde)
    {
        Point location = dtde.getLocation();
        Point target = planning.getLayout().location(location.x, location.y);
        try
        {
            //System.out.println("ATTENTION drop !!!!");
            planning.paintImmediately(rect2D.getBounds());
            //int action = dtde.getDropAction();
            Transferable transferable = dtde.getTransferable();
            if (transferable.isDataFlavorSupported(TransferableLessonBloc.BUSYBLOC_FLAVOR))
            {
                System.out.println("DataFlavor OK : BUSYBLOC_FLAVOR"); //$NON-NLS-1$
                // On recupere le lesson a droper
                BusyBloc busyBloc = (BusyBloc) transferable
                        .getTransferData(TransferableLessonBloc.BUSYBLOC_FLAVOR);
                
                
                if (busyBloc == null)
                {
                    System.err.println("rien a dropper !!!"); //$NON-NLS-1$
                    dtde.rejectDrop();
                    dtde.dropComplete(false);
                    planning.revalidate();
                    planning.repaint();
                    //return;                       
                }
                else
                {
                    BusyBloc newBusyBloc = new BusyBloc(busyBloc); 
                    newBusyBloc.setNbGap(length);
                    //System.out.println("Ajout en [" + target.x + "," + target.y + "]" + "week " + xToWeek(target.x) + " day " + yToDay(target.y) + "gap " + yToGapInTheDay(target.y));
                    planning.getModel().addElement(planning.xToWeek(target.x),
                            planning.yToDay(target.y), planning.yToGapInTheDay(target.y),
                            newBusyBloc);

                    dtde.dropComplete(true);
                    planning.revalidate();
                    planning.repaint();
                    //return;
                }
            }
            else if (transferable.isDataFlavorSupported(TransferableCourse.ICOURSE_FLAVOR))
            {
                System.out.println("DataFlavor OK : ICOURSE_FLAVOR"); //$NON-NLS-1$
            }//Cas d'un drag d'une ressoruce
            else if (transferable.isDataFlavorSupported(TransferableRessource.IRESSOURCE_FLAVOR))
            {
                System.out.println("DataFlavor OK : IRESSOURCE_FLAVOR"); //$NON-NLS-1$
                IResource ressource = (IResource) transferable.getTransferData(TransferableRessource.IRESSOURCE_FLAVOR);
                Component comp = planning.getComponentAt(location.x, location.y);
                GridBagConstraints c = planning.getLayout().getConstraints(comp);
                //System.out.println("objet trouvé en gap " + planning.yToGapInTheDay(c.gridy));
                if(comp instanceof JBusy)
                {
                    IBusy busy = ((JBusy)comp).getBusy().getBusy();
                    if(busy instanceof ILesson)
                    {
                        ((ILesson)busy).addResource(ressource);
                        
                        planning.getModel().updateLesson(planning.xToWeek(c.gridx), planning.yToDay(c.gridy), planning.yToGapInTheDay(c.gridy));
                        
                        dtde.dropComplete(true);
                        planning.revalidate();
                        planning.repaint();
                    }
                    
                }
                

            }
            else
            {
                System.out.println("Houston on a un probleme ! Mauvais flavor ... "); //$NON-NLS-1$

                
            }
        }
        catch (Exception e)
        {
            System.out.println(e);
            dtde.rejectDrop();
            dtde.dropComplete(false);
        }
    }
}

