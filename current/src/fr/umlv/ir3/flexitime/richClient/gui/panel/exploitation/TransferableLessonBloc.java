package fr.umlv.ir3.flexitime.richClient.gui.panel.exploitation;

import java.awt.datatransfer.*;
import java.util.*;

/**
 * Creates a Transferable object for a LessonBloc
 * 
 * @author FlexiTeam - binou
 */
public class TransferableLessonBloc implements Transferable {
	/**
	 * Comment for <code>LESSON_FLAVOR</code>
	 */
	public static final DataFlavor LESSON_FLAVOR = new DataFlavor(DataFlavor.javaJVMLocalObjectMimeType, "LessonBloc");
	private BusyBloc lessonBloc;
	private DataFlavor[] flavors = { LESSON_FLAVOR };
	
	/**
	* Constructs a transferrable component object for the specified component.
	 * @param lesson 
	*/
	public TransferableLessonBloc(BusyBloc lesson) {
		this.lessonBloc = lesson;
	}  
	/** 
	 * @param flavor
	 * @return object
	 * @throws UnsupportedFlavorException 
	 * 
	 * @see java.awt.datatransfer.Transferable#getTransferData(java.awt.datatransfer.DataFlavor)
	 * @author   FlexiTeam - binou
	 */
	public synchronized Object getTransferData(DataFlavor flavor) throws UnsupportedFlavorException {
		if (flavor != LESSON_FLAVOR) {
			throw new UnsupportedFlavorException(flavor);	
		}			
        return lessonBloc;
	}

	/** 
	 * @return dataFlavor
	 * 
	 * @see java.awt.datatransfer.Transferable#getTransferDataFlavors()
	 * @author   FlexiTeam - binou
	 */
	public DataFlavor[] getTransferDataFlavors() {
		return flavors;
	}

	/** 
	 * @param flavor
	 * @return boolean
	 * 
	 * @see java.awt.datatransfer.Transferable#isDataFlavorSupported(java.awt.datatransfer.DataFlavor)
	 * @author   FlexiTeam - binou
	 */
	public boolean isDataFlavorSupported(DataFlavor flavor) {
		return Arrays.asList(flavors).contains(flavor);
	}
}
